
05_uart1_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002bc  080002c4  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002bc  080002bc  000102c4  2**0
                  CONTENTS
  4 .ARM          00000000  080002bc  080002bc  000102c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002bc  080002c4  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002bc  080002bc  000102bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c0  080002c0  000102c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003db  00000000  00000000  0001032f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a7  00000000  00000000  0001070a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000108b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00010920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000840f  00000000  00000000  00010965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000621  00000000  00000000  00018d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002c2cf  00000000  00000000  00019395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000d8  00000000  00000000  00045664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0004573c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002a4 	.word	0x080002a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002a4 	.word	0x080002a4

08000108 <main>:
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate);
void uart1_write(uint8_t ch);
void uart1_tx_init();

int main()
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	uart1_tx_init();
 800010e:	f000 f811 	bl	8000134 <uart1_tx_init>
	while(1)
	{
		uart1_write('S');
 8000112:	2053      	movs	r0, #83	; 0x53
 8000114:	f000 f860 	bl	80001d8 <uart1_write>
		for(int i=0; i<100000; i++);
 8000118:	2300      	movs	r3, #0
 800011a:	607b      	str	r3, [r7, #4]
 800011c:	e002      	b.n	8000124 <main+0x1c>
 800011e:	687b      	ldr	r3, [r7, #4]
 8000120:	3301      	adds	r3, #1
 8000122:	607b      	str	r3, [r7, #4]
 8000124:	687b      	ldr	r3, [r7, #4]
 8000126:	4a02      	ldr	r2, [pc, #8]	; (8000130 <main+0x28>)
 8000128:	4293      	cmp	r3, r2
 800012a:	ddf8      	ble.n	800011e <main+0x16>
		uart1_write('S');
 800012c:	e7f1      	b.n	8000112 <main+0xa>
 800012e:	46c0      	nop			; (mov r8, r8)
 8000130:	0001869f 	.word	0x0001869f

08000134 <uart1_tx_init>:
	}
}

void uart1_tx_init()
{
 8000134:	b580      	push	{r7, lr}
 8000136:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOBEN;
 8000138:	4b1d      	ldr	r3, [pc, #116]	; (80001b0 <uart1_tx_init+0x7c>)
 800013a:	695a      	ldr	r2, [r3, #20]
 800013c:	4b1c      	ldr	r3, [pc, #112]	; (80001b0 <uart1_tx_init+0x7c>)
 800013e:	2180      	movs	r1, #128	; 0x80
 8000140:	02c9      	lsls	r1, r1, #11
 8000142:	430a      	orrs	r2, r1
 8000144:	615a      	str	r2, [r3, #20]
	//alternate fun mode//pb6
	GPIOB->MODER &= ~(1U<<12);
 8000146:	4b1b      	ldr	r3, [pc, #108]	; (80001b4 <uart1_tx_init+0x80>)
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	4b1a      	ldr	r3, [pc, #104]	; (80001b4 <uart1_tx_init+0x80>)
 800014c:	491a      	ldr	r1, [pc, #104]	; (80001b8 <uart1_tx_init+0x84>)
 800014e:	400a      	ands	r2, r1
 8000150:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<13);
 8000152:	4b18      	ldr	r3, [pc, #96]	; (80001b4 <uart1_tx_init+0x80>)
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <uart1_tx_init+0x80>)
 8000158:	2180      	movs	r1, #128	; 0x80
 800015a:	0189      	lsls	r1, r1, #6
 800015c:	430a      	orrs	r2, r1
 800015e:	601a      	str	r2, [r3, #0]
	//pb6 to alternate fun tx, af0
	GPIOB->AFR[0] &= ~(1<<24);
 8000160:	4b14      	ldr	r3, [pc, #80]	; (80001b4 <uart1_tx_init+0x80>)
 8000162:	6a1a      	ldr	r2, [r3, #32]
 8000164:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <uart1_tx_init+0x80>)
 8000166:	4915      	ldr	r1, [pc, #84]	; (80001bc <uart1_tx_init+0x88>)
 8000168:	400a      	ands	r2, r1
 800016a:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<25);
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <uart1_tx_init+0x80>)
 800016e:	6a1a      	ldr	r2, [r3, #32]
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <uart1_tx_init+0x80>)
 8000172:	4913      	ldr	r1, [pc, #76]	; (80001c0 <uart1_tx_init+0x8c>)
 8000174:	400a      	ands	r2, r1
 8000176:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<26);
 8000178:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <uart1_tx_init+0x80>)
 800017a:	6a1a      	ldr	r2, [r3, #32]
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <uart1_tx_init+0x80>)
 800017e:	4911      	ldr	r1, [pc, #68]	; (80001c4 <uart1_tx_init+0x90>)
 8000180:	400a      	ands	r2, r1
 8000182:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<27);
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <uart1_tx_init+0x80>)
 8000186:	6a1a      	ldr	r2, [r3, #32]
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <uart1_tx_init+0x80>)
 800018a:	490f      	ldr	r1, [pc, #60]	; (80001c8 <uart1_tx_init+0x94>)
 800018c:	400a      	ands	r2, r1
 800018e:	621a      	str	r2, [r3, #32]
	//enable clock to uart1//
	RCC->APB2ENR |= UART1EN;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <uart1_tx_init+0x7c>)
 8000192:	699a      	ldr	r2, [r3, #24]
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <uart1_tx_init+0x7c>)
 8000196:	2180      	movs	r1, #128	; 0x80
 8000198:	01c9      	lsls	r1, r1, #7
 800019a:	430a      	orrs	r2, r1
 800019c:	619a      	str	r2, [r3, #24]
	//baud rate//
	//set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
	USART2->BRR = 480000/96;
 800019e:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <uart1_tx_init+0x98>)
 80001a0:	4a0b      	ldr	r2, [pc, #44]	; (80001d0 <uart1_tx_init+0x9c>)
 80001a2:	60da      	str	r2, [r3, #12]
	//program stop bits//
	//USART1->CR2 = 0x00;
	//configure transmit direction//
	USART1->CR1 = (CR1_TE|UART_EN);
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <uart1_tx_init+0xa0>)
 80001a6:	2209      	movs	r2, #9
 80001a8:	601a      	str	r2, [r3, #0]
	//enable uart module//
}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40021000 	.word	0x40021000
 80001b4:	48000400 	.word	0x48000400
 80001b8:	ffffefff 	.word	0xffffefff
 80001bc:	feffffff 	.word	0xfeffffff
 80001c0:	fdffffff 	.word	0xfdffffff
 80001c4:	fbffffff 	.word	0xfbffffff
 80001c8:	f7ffffff 	.word	0xf7ffffff
 80001cc:	40004400 	.word	0x40004400
 80001d0:	00001388 	.word	0x00001388
 80001d4:	40013800 	.word	0x40013800

080001d8 <uart1_write>:
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

void uart1_write(uint8_t ch)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	0002      	movs	r2, r0
 80001e0:	1dfb      	adds	r3, r7, #7
 80001e2:	701a      	strb	r2, [r3, #0]

	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART1->ISR & SR_TXE));
 80001e4:	46c0      	nop			; (mov r8, r8)
 80001e6:	4b07      	ldr	r3, [pc, #28]	; (8000204 <uart1_write+0x2c>)
 80001e8:	69db      	ldr	r3, [r3, #28]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	4013      	ands	r3, r2
 80001ee:	d0fa      	beq.n	80001e6 <uart1_write+0xe>
	USART1->TDR = (ch&0xff);
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <uart1_write+0x2c>)
 80001f2:	1dfb      	adds	r3, r7, #7
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	8513      	strh	r3, [r2, #40]	; 0x28


}
 80001fa:	46c0      	nop			; (mov r8, r8)
 80001fc:	46bd      	mov	sp, r7
 80001fe:	b002      	add	sp, #8
 8000200:	bd80      	pop	{r7, pc}
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	40013800 	.word	0x40013800

08000208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800020a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800020c:	e000      	b.n	8000210 <Reset_Handler+0x8>
 800020e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000210:	480c      	ldr	r0, [pc, #48]	; (8000244 <LoopForever+0x6>)
  ldr r1, =_edata
 8000212:	490d      	ldr	r1, [pc, #52]	; (8000248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000214:	4a0d      	ldr	r2, [pc, #52]	; (800024c <LoopForever+0xe>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000218:	e002      	b.n	8000220 <LoopCopyDataInit>

0800021a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800021c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021e:	3304      	adds	r3, #4

08000220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000224:	d3f9      	bcc.n	800021a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000226:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000228:	4c0a      	ldr	r4, [pc, #40]	; (8000254 <LoopForever+0x16>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800022c:	e001      	b.n	8000232 <LoopFillZerobss>

0800022e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000230:	3204      	adds	r2, #4

08000232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000234:	d3fb      	bcc.n	800022e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000236:	f000 f811 	bl	800025c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800023a:	f7ff ff65 	bl	8000108 <main>

0800023e <LoopForever>:

LoopForever:
  b LoopForever
 800023e:	e7fe      	b.n	800023e <LoopForever>
  ldr   r0, =_estack
 8000240:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000248:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800024c:	080002c4 	.word	0x080002c4
  ldr r2, =_sbss
 8000250:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000254:	2000001c 	.word	0x2000001c

08000258 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000258:	e7fe      	b.n	8000258 <ADC_IRQHandler>
	...

0800025c <__libc_init_array>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2600      	movs	r6, #0
 8000260:	4c0c      	ldr	r4, [pc, #48]	; (8000294 <__libc_init_array+0x38>)
 8000262:	4d0d      	ldr	r5, [pc, #52]	; (8000298 <__libc_init_array+0x3c>)
 8000264:	1b64      	subs	r4, r4, r5
 8000266:	10a4      	asrs	r4, r4, #2
 8000268:	42a6      	cmp	r6, r4
 800026a:	d109      	bne.n	8000280 <__libc_init_array+0x24>
 800026c:	2600      	movs	r6, #0
 800026e:	f000 f819 	bl	80002a4 <_init>
 8000272:	4c0a      	ldr	r4, [pc, #40]	; (800029c <__libc_init_array+0x40>)
 8000274:	4d0a      	ldr	r5, [pc, #40]	; (80002a0 <__libc_init_array+0x44>)
 8000276:	1b64      	subs	r4, r4, r5
 8000278:	10a4      	asrs	r4, r4, #2
 800027a:	42a6      	cmp	r6, r4
 800027c:	d105      	bne.n	800028a <__libc_init_array+0x2e>
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	00b3      	lsls	r3, r6, #2
 8000282:	58eb      	ldr	r3, [r5, r3]
 8000284:	4798      	blx	r3
 8000286:	3601      	adds	r6, #1
 8000288:	e7ee      	b.n	8000268 <__libc_init_array+0xc>
 800028a:	00b3      	lsls	r3, r6, #2
 800028c:	58eb      	ldr	r3, [r5, r3]
 800028e:	4798      	blx	r3
 8000290:	3601      	adds	r6, #1
 8000292:	e7f2      	b.n	800027a <__libc_init_array+0x1e>
 8000294:	080002bc 	.word	0x080002bc
 8000298:	080002bc 	.word	0x080002bc
 800029c:	080002c0 	.word	0x080002c0
 80002a0:	080002bc 	.word	0x080002bc

080002a4 <_init>:
 80002a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002aa:	bc08      	pop	{r3}
 80002ac:	469e      	mov	lr, r3
 80002ae:	4770      	bx	lr

080002b0 <_fini>:
 80002b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	469e      	mov	lr, r3
 80002ba:	4770      	bx	lr
