
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b8  080002c0  000102c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b8  080002b8  000102c0  2**0
                  CONTENTS
  4 .ARM          00000000  080002b8  080002b8  000102c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b8  080002c0  000102c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b8  080002b8  000102b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002bc  080002bc  000102bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002c0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000368  00000000  00000000  0001032b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000016d  00000000  00000000  00010693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00010860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000083d9  00000000  00000000  0001089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000623  00000000  00000000  00018c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002c1fb  00000000  00000000  0001929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000b4  00000000  00000000  00045498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0004554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002a0 	.word	0x080002a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002a0 	.word	0x080002a0

08000108 <delay_ms>:
#include "stm32f0xx.h"

#define SystemCoreClock 48000000

void delay_ms(uint32_t ms) {
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
    volatile uint32_t i, j;
    for (i = 0; i < ms; i++)
 8000110:	2300      	movs	r3, #0
 8000112:	60fb      	str	r3, [r7, #12]
 8000114:	e00d      	b.n	8000132 <delay_ms+0x2a>
        for (j = 0; j < 4000; j++) {}  // Adjust this loop for your clock frequency
 8000116:	2300      	movs	r3, #0
 8000118:	60bb      	str	r3, [r7, #8]
 800011a:	e002      	b.n	8000122 <delay_ms+0x1a>
 800011c:	68bb      	ldr	r3, [r7, #8]
 800011e:	3301      	adds	r3, #1
 8000120:	60bb      	str	r3, [r7, #8]
 8000122:	68ba      	ldr	r2, [r7, #8]
 8000124:	23fa      	movs	r3, #250	; 0xfa
 8000126:	011b      	lsls	r3, r3, #4
 8000128:	429a      	cmp	r2, r3
 800012a:	d3f7      	bcc.n	800011c <delay_ms+0x14>
    for (i = 0; i < ms; i++)
 800012c:	68fb      	ldr	r3, [r7, #12]
 800012e:	3301      	adds	r3, #1
 8000130:	60fb      	str	r3, [r7, #12]
 8000132:	68fb      	ldr	r3, [r7, #12]
 8000134:	687a      	ldr	r2, [r7, #4]
 8000136:	429a      	cmp	r2, r3
 8000138:	d8ed      	bhi.n	8000116 <delay_ms+0xe>
}
 800013a:	46c0      	nop			; (mov r8, r8)
 800013c:	46c0      	nop			; (mov r8, r8)
 800013e:	46bd      	mov	sp, r7
 8000140:	b004      	add	sp, #16
 8000142:	bd80      	pop	{r7, pc}

08000144 <init_uart>:

void init_uart() {
 8000144:	b580      	push	{r7, lr}
 8000146:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000148:	4b15      	ldr	r3, [pc, #84]	; (80001a0 <init_uart+0x5c>)
 800014a:	695a      	ldr	r2, [r3, #20]
 800014c:	4b14      	ldr	r3, [pc, #80]	; (80001a0 <init_uart+0x5c>)
 800014e:	2180      	movs	r1, #128	; 0x80
 8000150:	0289      	lsls	r1, r1, #10
 8000152:	430a      	orrs	r2, r1
 8000154:	615a      	str	r2, [r3, #20]

    // Configure PA2 (TX) as alternate function (AF1) and PA3 (RX) as input
    GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8000156:	2390      	movs	r3, #144	; 0x90
 8000158:	05db      	lsls	r3, r3, #23
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	2390      	movs	r3, #144	; 0x90
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	21a0      	movs	r1, #160	; 0xa0
 8000162:	430a      	orrs	r2, r1
 8000164:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1 << (2 * 4)) | (1 << (3 * 4));
 8000166:	2390      	movs	r3, #144	; 0x90
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	6a1a      	ldr	r2, [r3, #32]
 800016c:	2390      	movs	r3, #144	; 0x90
 800016e:	05db      	lsls	r3, r3, #23
 8000170:	2188      	movs	r1, #136	; 0x88
 8000172:	0149      	lsls	r1, r1, #5
 8000174:	430a      	orrs	r2, r1
 8000176:	621a      	str	r2, [r3, #32]

    // Enable USART2 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000178:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <init_uart+0x5c>)
 800017a:	69da      	ldr	r2, [r3, #28]
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <init_uart+0x5c>)
 800017e:	2180      	movs	r1, #128	; 0x80
 8000180:	0289      	lsls	r1, r1, #10
 8000182:	430a      	orrs	r2, r1
 8000184:	61da      	str	r2, [r3, #28]

    // Configure USART1: 115200 baud, 8 data bits, 1 stop bit, no parity
    USART2->BRR = SystemCoreClock / 115200;
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <init_uart+0x60>)
 8000188:	22d0      	movs	r2, #208	; 0xd0
 800018a:	0052      	lsls	r2, r2, #1
 800018c:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <init_uart+0x60>)
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <init_uart+0x60>)
 8000194:	210d      	movs	r1, #13
 8000196:	430a      	orrs	r2, r1
 8000198:	601a      	str	r2, [r3, #0]
}
 800019a:	46c0      	nop			; (mov r8, r8)
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40021000 	.word	0x40021000
 80001a4:	40004400 	.word	0x40004400

080001a8 <send_char>:

void send_char(char c) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	0002      	movs	r2, r0
 80001b0:	1dfb      	adds	r3, r7, #7
 80001b2:	701a      	strb	r2, [r3, #0]
    // Wait until the transmit data register is empty
    while (!(USART2->ISR & USART_ISR_TXE)) {}
 80001b4:	46c0      	nop			; (mov r8, r8)
 80001b6:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <send_char+0x2c>)
 80001b8:	69db      	ldr	r3, [r3, #28]
 80001ba:	2280      	movs	r2, #128	; 0x80
 80001bc:	4013      	ands	r3, r2
 80001be:	d0fa      	beq.n	80001b6 <send_char+0xe>
    // Send the character
    USART2->TDR = c;
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <send_char+0x2c>)
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	8513      	strh	r3, [r2, #40]	; 0x28
}
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	46bd      	mov	sp, r7
 80001ce:	b002      	add	sp, #8
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	46c0      	nop			; (mov r8, r8)
 80001d4:	40004400 	.word	0x40004400

080001d8 <main>:

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    init_uart();
 80001dc:	f7ff ffb2 	bl	8000144 <init_uart>

    while (1) {
        send_char('H');
 80001e0:	2048      	movs	r0, #72	; 0x48
 80001e2:	f7ff ffe1 	bl	80001a8 <send_char>
        send_char('i');
 80001e6:	2069      	movs	r0, #105	; 0x69
 80001e8:	f7ff ffde 	bl	80001a8 <send_char>
        send_char('\r');
 80001ec:	200d      	movs	r0, #13
 80001ee:	f7ff ffdb 	bl	80001a8 <send_char>
        send_char('\n');
 80001f2:	200a      	movs	r0, #10
 80001f4:	f7ff ffd8 	bl	80001a8 <send_char>
        delay_ms(1000);
 80001f8:	23fa      	movs	r3, #250	; 0xfa
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	0018      	movs	r0, r3
 80001fe:	f7ff ff83 	bl	8000108 <delay_ms>
        send_char('H');
 8000202:	e7ed      	b.n	80001e0 <main+0x8>

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000208:	e000      	b.n	800020c <Reset_Handler+0x8>
 800020a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <LoopForever+0x6>)
  ldr r1, =_edata
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LoopForever+0xe>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000214:	e002      	b.n	800021c <LoopCopyDataInit>

08000216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021a:	3304      	adds	r3, #4

0800021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000220:	d3f9      	bcc.n	8000216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000224:	4c0a      	ldr	r4, [pc, #40]	; (8000250 <LoopForever+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000228:	e001      	b.n	800022e <LoopFillZerobss>

0800022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800022c:	3204      	adds	r2, #4

0800022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000230:	d3fb      	bcc.n	800022a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000232:	f000 f811 	bl	8000258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000236:	f7ff ffcf 	bl	80001d8 <main>

0800023a <LoopForever>:

LoopForever:
  b LoopForever
 800023a:	e7fe      	b.n	800023a <LoopForever>
  ldr   r0, =_estack
 800023c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	080002c0 	.word	0x080002c0
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	2000001c 	.word	0x2000001c

08000254 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC_IRQHandler>
	...

08000258 <__libc_init_array>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	2600      	movs	r6, #0
 800025c:	4c0c      	ldr	r4, [pc, #48]	; (8000290 <__libc_init_array+0x38>)
 800025e:	4d0d      	ldr	r5, [pc, #52]	; (8000294 <__libc_init_array+0x3c>)
 8000260:	1b64      	subs	r4, r4, r5
 8000262:	10a4      	asrs	r4, r4, #2
 8000264:	42a6      	cmp	r6, r4
 8000266:	d109      	bne.n	800027c <__libc_init_array+0x24>
 8000268:	2600      	movs	r6, #0
 800026a:	f000 f819 	bl	80002a0 <_init>
 800026e:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <__libc_init_array+0x40>)
 8000270:	4d0a      	ldr	r5, [pc, #40]	; (800029c <__libc_init_array+0x44>)
 8000272:	1b64      	subs	r4, r4, r5
 8000274:	10a4      	asrs	r4, r4, #2
 8000276:	42a6      	cmp	r6, r4
 8000278:	d105      	bne.n	8000286 <__libc_init_array+0x2e>
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	00b3      	lsls	r3, r6, #2
 800027e:	58eb      	ldr	r3, [r5, r3]
 8000280:	4798      	blx	r3
 8000282:	3601      	adds	r6, #1
 8000284:	e7ee      	b.n	8000264 <__libc_init_array+0xc>
 8000286:	00b3      	lsls	r3, r6, #2
 8000288:	58eb      	ldr	r3, [r5, r3]
 800028a:	4798      	blx	r3
 800028c:	3601      	adds	r6, #1
 800028e:	e7f2      	b.n	8000276 <__libc_init_array+0x1e>
 8000290:	080002b8 	.word	0x080002b8
 8000294:	080002b8 	.word	0x080002b8
 8000298:	080002bc 	.word	0x080002bc
 800029c:	080002b8 	.word	0x080002b8

080002a0 <_init>:
 80002a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a6:	bc08      	pop	{r3}
 80002a8:	469e      	mov	lr, r3
 80002aa:	4770      	bx	lr

080002ac <_fini>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr
