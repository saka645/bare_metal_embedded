
05_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080002f4  080002f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080002fc  080002fc  00010304  2**0
                  CONTENTS
  4 .ARM          00000000  080002fc  080002fc  00010304  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002fc  08000304  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000304  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000304  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001032c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003f4  00000000  00000000  0001036f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a9  00000000  00000000  00010763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00010978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008403  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000639  00000000  00000000  00018dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002c2ac  00000000  00000000  000193f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000d8  00000000  00000000  000456a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00045780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002dc 	.word	0x080002dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002dc 	.word	0x080002dc

08000108 <main>:
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(uint8_t *ch);
void uart2_tx_init();

int main()
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	uart2_tx_init();
 800010e:	f000 f813 	bl	8000138 <uart2_tx_init>
	while(1)
	{
		uart2_write("Hello\n");
 8000112:	4b07      	ldr	r3, [pc, #28]	; (8000130 <main+0x28>)
 8000114:	0018      	movs	r0, r3
 8000116:	f000 f86f 	bl	80001f8 <uart2_write>
		for(int i=0; i<100000; i++);
 800011a:	2300      	movs	r3, #0
 800011c:	607b      	str	r3, [r7, #4]
 800011e:	e002      	b.n	8000126 <main+0x1e>
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	3301      	adds	r3, #1
 8000124:	607b      	str	r3, [r7, #4]
 8000126:	687b      	ldr	r3, [r7, #4]
 8000128:	4a02      	ldr	r2, [pc, #8]	; (8000134 <main+0x2c>)
 800012a:	4293      	cmp	r3, r2
 800012c:	ddf8      	ble.n	8000120 <main+0x18>
		uart2_write("Hello\n");
 800012e:	e7f0      	b.n	8000112 <main+0xa>
 8000130:	080002f4 	.word	0x080002f4
 8000134:	0001869f 	.word	0x0001869f

08000138 <uart2_tx_init>:
	}
}

void uart2_tx_init()
{
 8000138:	b580      	push	{r7, lr}
 800013a:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOAEN;
 800013c:	4b28      	ldr	r3, [pc, #160]	; (80001e0 <uart2_tx_init+0xa8>)
 800013e:	695a      	ldr	r2, [r3, #20]
 8000140:	4b27      	ldr	r3, [pc, #156]	; (80001e0 <uart2_tx_init+0xa8>)
 8000142:	2180      	movs	r1, #128	; 0x80
 8000144:	0289      	lsls	r1, r1, #10
 8000146:	430a      	orrs	r2, r1
 8000148:	615a      	str	r2, [r3, #20]
	//alternate fun mode//
	GPIOA->MODER &= ~(1U<<4);
 800014a:	2390      	movs	r3, #144	; 0x90
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	681a      	ldr	r2, [r3, #0]
 8000150:	2390      	movs	r3, #144	; 0x90
 8000152:	05db      	lsls	r3, r3, #23
 8000154:	2110      	movs	r1, #16
 8000156:	438a      	bics	r2, r1
 8000158:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5);
 800015a:	2390      	movs	r3, #144	; 0x90
 800015c:	05db      	lsls	r3, r3, #23
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	2390      	movs	r3, #144	; 0x90
 8000162:	05db      	lsls	r3, r3, #23
 8000164:	2120      	movs	r1, #32
 8000166:	430a      	orrs	r2, r1
 8000168:	601a      	str	r2, [r3, #0]
	//pa2 to alternate fun tx, af1
	GPIOA->AFR[0] |= (1<<8);
 800016a:	2390      	movs	r3, #144	; 0x90
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	6a1a      	ldr	r2, [r3, #32]
 8000170:	2390      	movs	r3, #144	; 0x90
 8000172:	05db      	lsls	r3, r3, #23
 8000174:	2180      	movs	r1, #128	; 0x80
 8000176:	0049      	lsls	r1, r1, #1
 8000178:	430a      	orrs	r2, r1
 800017a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<9);
 800017c:	2390      	movs	r3, #144	; 0x90
 800017e:	05db      	lsls	r3, r3, #23
 8000180:	6a1a      	ldr	r2, [r3, #32]
 8000182:	2390      	movs	r3, #144	; 0x90
 8000184:	05db      	lsls	r3, r3, #23
 8000186:	4917      	ldr	r1, [pc, #92]	; (80001e4 <uart2_tx_init+0xac>)
 8000188:	400a      	ands	r2, r1
 800018a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<10);
 800018c:	2390      	movs	r3, #144	; 0x90
 800018e:	05db      	lsls	r3, r3, #23
 8000190:	6a1a      	ldr	r2, [r3, #32]
 8000192:	2390      	movs	r3, #144	; 0x90
 8000194:	05db      	lsls	r3, r3, #23
 8000196:	4914      	ldr	r1, [pc, #80]	; (80001e8 <uart2_tx_init+0xb0>)
 8000198:	400a      	ands	r2, r1
 800019a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 800019c:	2390      	movs	r3, #144	; 0x90
 800019e:	05db      	lsls	r3, r3, #23
 80001a0:	6a1a      	ldr	r2, [r3, #32]
 80001a2:	2390      	movs	r3, #144	; 0x90
 80001a4:	05db      	lsls	r3, r3, #23
 80001a6:	4911      	ldr	r1, [pc, #68]	; (80001ec <uart2_tx_init+0xb4>)
 80001a8:	400a      	ands	r2, r1
 80001aa:	621a      	str	r2, [r3, #32]
	//enable clock to uart2//
	RCC->APB1ENR |= UART2EN;
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <uart2_tx_init+0xa8>)
 80001ae:	69da      	ldr	r2, [r3, #28]
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <uart2_tx_init+0xa8>)
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	0289      	lsls	r1, r1, #10
 80001b6:	430a      	orrs	r2, r1
 80001b8:	61da      	str	r2, [r3, #28]
	//baud rate//
	//set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	USART2->BRR = 0x1388;
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <uart2_tx_init+0xb8>)
 80001bc:	4a0d      	ldr	r2, [pc, #52]	; (80001f4 <uart2_tx_init+0xbc>)
 80001be:	60da      	str	r2, [r3, #12]
	//program stop bits//
	USART2->CR2 = 0x00;
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <uart2_tx_init+0xb8>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
	//configure transmit direction//
	USART2->CR1 = CR1_TE;
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <uart2_tx_init+0xb8>)
 80001c8:	2208      	movs	r2, #8
 80001ca:	601a      	str	r2, [r3, #0]
	//enable uart module//
	USART2->CR1 |= UART_EN;
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <uart2_tx_init+0xb8>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <uart2_tx_init+0xb8>)
 80001d2:	2101      	movs	r1, #1
 80001d4:	430a      	orrs	r2, r1
 80001d6:	601a      	str	r2, [r3, #0]
}
 80001d8:	46c0      	nop			; (mov r8, r8)
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	46c0      	nop			; (mov r8, r8)
 80001e0:	40021000 	.word	0x40021000
 80001e4:	fffffdff 	.word	0xfffffdff
 80001e8:	fffffbff 	.word	0xfffffbff
 80001ec:	fffff7ff 	.word	0xfffff7ff
 80001f0:	40004400 	.word	0x40004400
 80001f4:	00001388 	.word	0x00001388

080001f8 <uart2_write>:
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

void uart2_write(uint8_t *ch)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	while(*ch)
 8000200:	e012      	b.n	8000228 <uart2_write+0x30>
	{
	//make sure transmit data reg is empty//
	//write transmit data to reg//
	//while(!(USART2->ISR & SR_TXE));
	USART2->TDR = (*ch&0xff);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781a      	ldrb	r2, [r3, #0]
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <uart2_write+0x44>)
 8000208:	b292      	uxth	r2, r2
 800020a:	851a      	strh	r2, [r3, #40]	; 0x28
	for(int i=0; i<1000; i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <uart2_write+0x20>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	23fa      	movs	r3, #250	; 0xfa
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	429a      	cmp	r2, r3
 8000220:	dbf7      	blt.n	8000212 <uart2_write+0x1a>
	ch++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
	while(*ch)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1e8      	bne.n	8000202 <uart2_write+0xa>
	}
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	b004      	add	sp, #16
 8000238:	bd80      	pop	{r7, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	40004400 	.word	0x40004400

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000244:	e000      	b.n	8000248 <Reset_Handler+0x8>
 8000246:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 f811 	bl	8000294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ff49 	bl	8000108 <main>

08000276 <LoopForever>:

LoopForever:
  b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000284:	08000304 	.word	0x08000304
  ldr r2, =_sbss
 8000288:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800028c:	2000001c 	.word	0x2000001c

08000290 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC_IRQHandler>
	...

08000294 <__libc_init_array>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	2600      	movs	r6, #0
 8000298:	4c0c      	ldr	r4, [pc, #48]	; (80002cc <__libc_init_array+0x38>)
 800029a:	4d0d      	ldr	r5, [pc, #52]	; (80002d0 <__libc_init_array+0x3c>)
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	10a4      	asrs	r4, r4, #2
 80002a0:	42a6      	cmp	r6, r4
 80002a2:	d109      	bne.n	80002b8 <__libc_init_array+0x24>
 80002a4:	2600      	movs	r6, #0
 80002a6:	f000 f819 	bl	80002dc <_init>
 80002aa:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <__libc_init_array+0x40>)
 80002ac:	4d0a      	ldr	r5, [pc, #40]	; (80002d8 <__libc_init_array+0x44>)
 80002ae:	1b64      	subs	r4, r4, r5
 80002b0:	10a4      	asrs	r4, r4, #2
 80002b2:	42a6      	cmp	r6, r4
 80002b4:	d105      	bne.n	80002c2 <__libc_init_array+0x2e>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	00b3      	lsls	r3, r6, #2
 80002ba:	58eb      	ldr	r3, [r5, r3]
 80002bc:	4798      	blx	r3
 80002be:	3601      	adds	r6, #1
 80002c0:	e7ee      	b.n	80002a0 <__libc_init_array+0xc>
 80002c2:	00b3      	lsls	r3, r6, #2
 80002c4:	58eb      	ldr	r3, [r5, r3]
 80002c6:	4798      	blx	r3
 80002c8:	3601      	adds	r6, #1
 80002ca:	e7f2      	b.n	80002b2 <__libc_init_array+0x1e>
 80002cc:	080002fc 	.word	0x080002fc
 80002d0:	080002fc 	.word	0x080002fc
 80002d4:	08000300 	.word	0x08000300
 80002d8:	080002fc 	.word	0x080002fc

080002dc <_init>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr

080002e8 <_fini>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr
