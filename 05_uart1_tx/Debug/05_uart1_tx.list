
05_uart1_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000368  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000430  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000430  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003db  00000000  00000000  0001049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a7  00000000  00000000  00010876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00010a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000840f  00000000  00000000  00010acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000061e  00000000  00000000  00018edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002c2ce  00000000  00000000  000194fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f8  00000000  00000000  000457c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000458c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000410 	.word	0x08000410

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000410 	.word	0x08000410

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate);
void uart1_write(uint8_t ch);
void uart1_tx_init();

int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	uart1_tx_init();
 8000226:	f000 f811 	bl	800024c <uart1_tx_init>
	while(1)
	{
		uart1_write('S');
 800022a:	2053      	movs	r0, #83	; 0x53
 800022c:	f000 f88a 	bl	8000344 <uart1_write>
		for(int i=0; i<100000; i++);
 8000230:	2300      	movs	r3, #0
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	e002      	b.n	800023c <main+0x1c>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3301      	adds	r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a02      	ldr	r2, [pc, #8]	; (8000248 <main+0x28>)
 8000240:	4293      	cmp	r3, r2
 8000242:	ddf8      	ble.n	8000236 <main+0x16>
		uart1_write('S');
 8000244:	e7f1      	b.n	800022a <main+0xa>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	0001869f 	.word	0x0001869f

0800024c <uart1_tx_init>:
	}
}

void uart1_tx_init()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOBEN;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <uart1_tx_init+0x84>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <uart1_tx_init+0x84>)
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	02c9      	lsls	r1, r1, #11
 800025a:	430a      	orrs	r2, r1
 800025c:	615a      	str	r2, [r3, #20]
	//alternate fun mode//pb6
	GPIOB->MODER &= ~(1U<<12);
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <uart1_tx_init+0x88>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <uart1_tx_init+0x88>)
 8000264:	491c      	ldr	r1, [pc, #112]	; (80002d8 <uart1_tx_init+0x8c>)
 8000266:	400a      	ands	r2, r1
 8000268:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<13);
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <uart1_tx_init+0x88>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <uart1_tx_init+0x88>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0189      	lsls	r1, r1, #6
 8000274:	430a      	orrs	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
	//pb6 to alternate fun tx, af0
	GPIOB->AFR[0] &= ~(1<<24);
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <uart1_tx_init+0x88>)
 800027a:	6a1a      	ldr	r2, [r3, #32]
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <uart1_tx_init+0x88>)
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <uart1_tx_init+0x90>)
 8000280:	400a      	ands	r2, r1
 8000282:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<25);
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <uart1_tx_init+0x88>)
 8000286:	6a1a      	ldr	r2, [r3, #32]
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <uart1_tx_init+0x88>)
 800028a:	4915      	ldr	r1, [pc, #84]	; (80002e0 <uart1_tx_init+0x94>)
 800028c:	400a      	ands	r2, r1
 800028e:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<26);
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <uart1_tx_init+0x88>)
 8000292:	6a1a      	ldr	r2, [r3, #32]
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <uart1_tx_init+0x88>)
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <uart1_tx_init+0x98>)
 8000298:	400a      	ands	r2, r1
 800029a:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1<<27);
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <uart1_tx_init+0x88>)
 800029e:	6a1a      	ldr	r2, [r3, #32]
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <uart1_tx_init+0x88>)
 80002a2:	4911      	ldr	r1, [pc, #68]	; (80002e8 <uart1_tx_init+0x9c>)
 80002a4:	400a      	ands	r2, r1
 80002a6:	621a      	str	r2, [r3, #32]
	//enable clock to uart1//
	RCC->APB2ENR |= UART1EN;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <uart1_tx_init+0x84>)
 80002aa:	699a      	ldr	r2, [r3, #24]
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <uart1_tx_init+0x84>)
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	01c9      	lsls	r1, r1, #7
 80002b2:	430a      	orrs	r2, r1
 80002b4:	619a      	str	r2, [r3, #24]
	//baud rate//
	set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
 80002b6:	2396      	movs	r3, #150	; 0x96
 80002b8:	019b      	lsls	r3, r3, #6
 80002ba:	490c      	ldr	r1, [pc, #48]	; (80002ec <uart1_tx_init+0xa0>)
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <uart1_tx_init+0xa4>)
 80002be:	001a      	movs	r2, r3
 80002c0:	f000 f818 	bl	80002f4 <set_baudrate>
	//USART1->BRR = 80000/96;
	//program stop bits//
	//USART1->CR2 = 0x00;
	//configure transmit direction//
	USART1->CR1 = (CR1_TE|UART_EN);
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <uart1_tx_init+0xa4>)
 80002c6:	2209      	movs	r2, #9
 80002c8:	601a      	str	r2, [r3, #0]
	//enable uart module//
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000
 80002d4:	48000400 	.word	0x48000400
 80002d8:	ffffefff 	.word	0xffffefff
 80002dc:	feffffff 	.word	0xfeffffff
 80002e0:	fdffffff 	.word	0xfdffffff
 80002e4:	fbffffff 	.word	0xfbffffff
 80002e8:	f7ffffff 	.word	0xf7ffffff
 80002ec:	007a1200 	.word	0x007a1200
 80002f0:	40013800 	.word	0x40013800

080002f4 <set_baudrate>:
static void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
	USARTTX->BRR = compute_uart_div(PeriphClk, BaudRate);//0x340//1a1
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	0011      	movs	r1, r2
 8000306:	0018      	movs	r0, r3
 8000308:	f000 f808 	bl	800031c <compute_uart_div>
 800030c:	0003      	movs	r3, r0
 800030e:	001a      	movs	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	60da      	str	r2, [r3, #12]
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b004      	add	sp, #16
 800031a:	bd80      	pop	{r7, pc}

0800031c <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	085a      	lsrs	r2, r3, #1
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	18d3      	adds	r3, r2, r3
 800032e:	6839      	ldr	r1, [r7, #0]
 8000330:	0018      	movs	r0, r3
 8000332:	f7ff fee9 	bl	8000108 <__udivsi3>
 8000336:	0003      	movs	r3, r0
 8000338:	b29b      	uxth	r3, r3
}
 800033a:	0018      	movs	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	b002      	add	sp, #8
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <uart1_write>:

void uart1_write(uint8_t ch)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	0002      	movs	r2, r0
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	701a      	strb	r2, [r3, #0]

	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART1->ISR & SR_TXE));
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <uart1_write+0x2c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	4013      	ands	r3, r2
 800035a:	d0fa      	beq.n	8000352 <uart1_write+0xe>
	USART1->TDR = (ch&0xff);
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <uart1_write+0x2c>)
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b29b      	uxth	r3, r3
 8000364:	8513      	strh	r3, [r2, #40]	; 0x28


}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b002      	add	sp, #8
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40013800 	.word	0x40013800

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000378:	e000      	b.n	800037c <Reset_Handler+0x8>
 800037a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 f811 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff3b 	bl	8000220 <main>

080003aa <LoopForever>:

LoopForever:
  b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	2600      	movs	r6, #0
 80003cc:	4c0c      	ldr	r4, [pc, #48]	; (8000400 <__libc_init_array+0x38>)
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x3c>)
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	42a6      	cmp	r6, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	2600      	movs	r6, #0
 80003da:	f000 f819 	bl	8000410 <_init>
 80003de:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <__libc_init_array+0x40>)
 80003e0:	4d0a      	ldr	r5, [pc, #40]	; (800040c <__libc_init_array+0x44>)
 80003e2:	1b64      	subs	r4, r4, r5
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	00b3      	lsls	r3, r6, #2
 80003ee:	58eb      	ldr	r3, [r5, r3]
 80003f0:	4798      	blx	r3
 80003f2:	3601      	adds	r6, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	00b3      	lsls	r3, r6, #2
 80003f8:	58eb      	ldr	r3, [r5, r3]
 80003fa:	4798      	blx	r3
 80003fc:	3601      	adds	r6, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	0800042c 	.word	0x0800042c
 800040c:	08000428 	.word	0x08000428

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
