#include <stm32f0xx.h>

#define UART1EN			(1U<<14)
#define GPIOAEN			(1U<<17)
#define SYS_FREQ		48000000U//16000000
#define APB1_CLK		SYS_FREQ
#define UART_BAUDRATE	9600U
#define CR1_TE			(1U<<3)
#define UART_EN			(1U<<0)
#define SR_TXE			(1U<<7)

static void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(uint8_t *ch);
void uart2_tx_init();

int main()
{
	uart2_tx_init();
	while(1)
	{
		uart2_write((uint8_t *)"Hello\n");
		for(int i=0; i<100000; i++);
	}
}

void uart2_tx_init()
{
	//enable clock to gpio//
	RCC->AHBENR |= GPIOAEN;
	//alternate fun mode//pa9
	GPIOA->MODER &= ~(1U<<18);
	GPIOA->MODER |= (1U<<19);
	GPIOA->MODER &= ~(1U<<20);
	GPIOA->MODER |= (1U<<21);
	//pa2 to alternate fun tx, af1
	GPIOA->AFR[1] |= (1<<4);
	GPIOA->AFR[1] &= ~(1<<5);
	GPIOA->AFR[1] &= ~(1<<6);
	GPIOA->AFR[1] &= ~(1<<7);
	GPIOA->AFR[1] |= (1<<8);
	GPIOA->AFR[1] &= ~(1<<9);
	GPIOA->AFR[1] &= ~(1<<10);
	GPIOA->AFR[1] &= ~(1<<11);
	//enable clock to uart2//
	RCC->APB2ENR |= UART1EN;
	//baud rate//
	set_baudrate(USART1, APB1_CLK, UART_BAUDRATE);
	//USART2->BRR = 0x1388;
	//program stop bits//
	USART1->CR2 = 0x00;
	//configure transmit direction//
	USART1->CR1 = CR1_TE;
	//enable uart module//
	USART1->CR1 |= UART_EN;
}
static void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate)
{
	USARTTX->BRR = compute_uart_div(PeriphClk, BaudRate);//0x340//1a1
}

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

void uart2_write(uint8_t *ch)
{
	while(*ch)
	{
	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART1->ISR & SR_TXE));
	USART1->TDR = (*ch&0xff);
	for(int i=0; i<1000; i++);
	ch++;
	}
}
