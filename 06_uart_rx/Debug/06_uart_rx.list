
06_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ff8  08000ff8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ff8  08000ff8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff8  08000ff8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff8  08000ff8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  0800105c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800105c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f3d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ae  00000000  00000000  00021004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000215b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fc  00000000  00000000  00021728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a21f  00000000  00000000  00021824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b51  00000000  00000000  0002ba43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00031eee  00000000  00000000  0002d594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ac8  00000000  00000000  0005f484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0005ff4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000fe0 	.word	0x08000fe0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08000fe0 	.word	0x08000fe0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <pa1_adc_init>:
#define ADC_START		(1U<<4)
#define ADC_SR_EOC		(1U<<2)
#define ADC1_CH1		(1U<<1)

void pa1_adc_init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/* configure adc gpio pin */

	/* enable clock access to gpioa */
	RCC->AHBENR |= GPIOA_EN;
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <pa1_adc_init+0x60>)
 8000226:	695a      	ldr	r2, [r3, #20]
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <pa1_adc_init+0x60>)
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0249      	lsls	r1, r1, #9
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
	/* set pa1 mode to analog */
	GPIOA->MODER |= (1U<<2);
 8000232:	2390      	movs	r3, #144	; 0x90
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2104      	movs	r1, #4
 800023e:	430a      	orrs	r2, r1
 8000240:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<3);
 8000242:	2390      	movs	r3, #144	; 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	2390      	movs	r3, #144	; 0x90
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2108      	movs	r1, #8
 800024e:	430a      	orrs	r2, r1
 8000250:	601a      	str	r2, [r3, #0]
	/*configure adc module */
	ADC1->CHSELR |= ADC1_CH1;
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <pa1_adc_init+0x64>)
 8000254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <pa1_adc_init+0x64>)
 8000258:	2102      	movs	r1, #2
 800025a:	430a      	orrs	r2, r1
 800025c:	629a      	str	r2, [r3, #40]	; 0x28
	/* enable clock access to adc */
	RCC->APB2ENR |= ADC1_EN;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <pa1_adc_init+0x60>)
 8000260:	699a      	ldr	r2, [r3, #24]
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <pa1_adc_init+0x60>)
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	0089      	lsls	r1, r1, #2
 8000268:	430a      	orrs	r2, r1
 800026a:	619a      	str	r2, [r3, #24]
	/* configure adc parameters */

	ADC1->CR |= ADC_EN;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <pa1_adc_init+0x64>)
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <pa1_adc_init+0x64>)
 8000272:	2101      	movs	r1, #1
 8000274:	430a      	orrs	r2, r1
 8000276:	609a      	str	r2, [r3, #8]

}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	40021000 	.word	0x40021000
 8000284:	40012400 	.word	0x40012400

08000288 <__io_putchar>:

uint32_t sensor_value = 0;
char key = 0;

int __io_putchar(int ch)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	0018      	movs	r0, r3
 8000296:	f000 f8fb 	bl	8000490 <uart2_write>
	return ch;
 800029a:	687b      	ldr	r3, [r7, #4]
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b002      	add	sp, #8
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <main>:
int main()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80002aa:	f000 f81d 	bl	80002e8 <uart2_tx_init>
	pa1_adc_init();
 80002ae:	f7ff ffb7 	bl	8000220 <pa1_adc_init>
	//start_conversion();
	while(1)
	{
		key = uart2_read();
 80002b2:	f000 f8db 	bl	800046c <uart2_read>
 80002b6:	0003      	movs	r3, r0
 80002b8:	001a      	movs	r2, r3
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <main+0x3c>)
 80002bc:	701a      	strb	r2, [r3, #0]
		putchar(key);
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <main+0x3c>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fa86 	bl	80007d4 <putchar>
//		start_conversion();
//		sensor_value = adc_read();
//		//uart2_write("Hello\n");
//		printf("sensor value=%d\n",(int)sensor_value);
		for(int i=0; i<100000; i++);
 80002c8:	2300      	movs	r3, #0
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	e002      	b.n	80002d4 <main+0x30>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3301      	adds	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <main+0x40>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	ddf8      	ble.n	80002ce <main+0x2a>
		key = uart2_read();
 80002dc:	e7e9      	b.n	80002b2 <main+0xe>
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	20000078 	.word	0x20000078
 80002e4:	0001869f 	.word	0x0001869f

080002e8 <uart2_tx_init>:
	}
}

void uart2_tx_init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOAEN;
 80002ec:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <uart2_tx_init+0x110>)
 80002ee:	695a      	ldr	r2, [r3, #20]
 80002f0:	4b41      	ldr	r3, [pc, #260]	; (80003f8 <uart2_tx_init+0x110>)
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	0289      	lsls	r1, r1, #10
 80002f6:	430a      	orrs	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
	//alternate fun mode//
	GPIOA->MODER &= ~(1U<<4);
 80002fa:	2390      	movs	r3, #144	; 0x90
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	2390      	movs	r3, #144	; 0x90
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2110      	movs	r1, #16
 8000306:	438a      	bics	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5);
 800030a:	2390      	movs	r3, #144	; 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	2390      	movs	r3, #144	; 0x90
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	2120      	movs	r1, #32
 8000316:	430a      	orrs	r2, r1
 8000318:	601a      	str	r2, [r3, #0]
	//pa2 to alternate fun tx, af1
	GPIOA->AFR[0] |= (1<<8);
 800031a:	2390      	movs	r3, #144	; 0x90
 800031c:	05db      	lsls	r3, r3, #23
 800031e:	6a1a      	ldr	r2, [r3, #32]
 8000320:	2390      	movs	r3, #144	; 0x90
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	0049      	lsls	r1, r1, #1
 8000328:	430a      	orrs	r2, r1
 800032a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<9);
 800032c:	2390      	movs	r3, #144	; 0x90
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	6a1a      	ldr	r2, [r3, #32]
 8000332:	2390      	movs	r3, #144	; 0x90
 8000334:	05db      	lsls	r3, r3, #23
 8000336:	4931      	ldr	r1, [pc, #196]	; (80003fc <uart2_tx_init+0x114>)
 8000338:	400a      	ands	r2, r1
 800033a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<10);
 800033c:	2390      	movs	r3, #144	; 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	6a1a      	ldr	r2, [r3, #32]
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	492e      	ldr	r1, [pc, #184]	; (8000400 <uart2_tx_init+0x118>)
 8000348:	400a      	ands	r2, r1
 800034a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	6a1a      	ldr	r2, [r3, #32]
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	492b      	ldr	r1, [pc, #172]	; (8000404 <uart2_tx_init+0x11c>)
 8000358:	400a      	ands	r2, r1
 800035a:	621a      	str	r2, [r3, #32]

	/*PA3 AS ALTERNATE FUN*/
	//alternate fun mode RX//
	GPIOA->MODER &= ~(1U<<6);
 800035c:	2390      	movs	r3, #144	; 0x90
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	438a      	bics	r2, r1
 800036a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<7);
 800036c:	2390      	movs	r3, #144	; 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	430a      	orrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
	//pa2 to alternate fun tx, af1
	GPIOA->AFR[0] |= (1<<12);
 800037c:	2390      	movs	r3, #144	; 0x90
 800037e:	05db      	lsls	r3, r3, #23
 8000380:	6a1a      	ldr	r2, [r3, #32]
 8000382:	2390      	movs	r3, #144	; 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	0149      	lsls	r1, r1, #5
 800038a:	430a      	orrs	r2, r1
 800038c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<13);
 800038e:	2390      	movs	r3, #144	; 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	6a1a      	ldr	r2, [r3, #32]
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	491b      	ldr	r1, [pc, #108]	; (8000408 <uart2_tx_init+0x120>)
 800039a:	400a      	ands	r2, r1
 800039c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<14);
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	6a1a      	ldr	r2, [r3, #32]
 80003a4:	2390      	movs	r3, #144	; 0x90
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	4918      	ldr	r1, [pc, #96]	; (800040c <uart2_tx_init+0x124>)
 80003aa:	400a      	ands	r2, r1
 80003ac:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 80003ae:	2390      	movs	r3, #144	; 0x90
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	6a1a      	ldr	r2, [r3, #32]
 80003b4:	2390      	movs	r3, #144	; 0x90
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	4915      	ldr	r1, [pc, #84]	; (8000410 <uart2_tx_init+0x128>)
 80003ba:	400a      	ands	r2, r1
 80003bc:	621a      	str	r2, [r3, #32]


	//enable clock to uart2//
	RCC->APB1ENR |= UART2EN;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <uart2_tx_init+0x110>)
 80003c0:	69da      	ldr	r2, [r3, #28]
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <uart2_tx_init+0x110>)
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	0289      	lsls	r1, r1, #10
 80003c8:	430a      	orrs	r2, r1
 80003ca:	61da      	str	r2, [r3, #28]
	//baud rate//
	set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003cc:	2396      	movs	r3, #150	; 0x96
 80003ce:	019b      	lsls	r3, r3, #6
 80003d0:	4910      	ldr	r1, [pc, #64]	; (8000414 <uart2_tx_init+0x12c>)
 80003d2:	4811      	ldr	r0, [pc, #68]	; (8000418 <uart2_tx_init+0x130>)
 80003d4:	001a      	movs	r2, r3
 80003d6:	f000 f821 	bl	800041c <set_baudrate>
	//USART2->BRR = 0x1388;
	//program stop bits//
	USART2->CR2 = 0x00;
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <uart2_tx_init+0x130>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
	//configure transmit direction//
	USART2->CR1 = (CR1_TE | CR1_RE);
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <uart2_tx_init+0x130>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	601a      	str	r2, [r3, #0]
	//enable uart module//
	USART2->CR1 |= UART_EN;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <uart2_tx_init+0x130>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <uart2_tx_init+0x130>)
 80003ec:	2101      	movs	r1, #1
 80003ee:	430a      	orrs	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	fffffdff 	.word	0xfffffdff
 8000400:	fffffbff 	.word	0xfffffbff
 8000404:	fffff7ff 	.word	0xfffff7ff
 8000408:	ffffdfff 	.word	0xffffdfff
 800040c:	ffffbfff 	.word	0xffffbfff
 8000410:	ffff7fff 	.word	0xffff7fff
 8000414:	02dc6c00 	.word	0x02dc6c00
 8000418:	40004400 	.word	0x40004400

0800041c <set_baudrate>:
static void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
	USARTTX->BRR = compute_uart_div(PeriphClk, BaudRate);//0x340//1a1
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f808 	bl	8000444 <compute_uart_div>
 8000434:	0003      	movs	r3, r0
 8000436:	001a      	movs	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	60da      	str	r2, [r3, #12]
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bd80      	pop	{r7, pc}

08000444 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	085a      	lsrs	r2, r3, #1
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	18d3      	adds	r3, r2, r3
 8000456:	6839      	ldr	r1, [r7, #0]
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff fe55 	bl	8000108 <__udivsi3>
 800045e:	0003      	movs	r3, r0
 8000460:	b29b      	uxth	r3, r3
}
 8000462:	0018      	movs	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <uart2_read>:

char uart2_read(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	while(!(USART2->ISR & SR_RXNE));
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <uart2_read+0x20>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	2220      	movs	r2, #32
 8000478:	4013      	ands	r3, r2
 800047a:	d0fa      	beq.n	8000472 <uart2_read+0x6>
	return USART2->RDR;
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <uart2_read+0x20>)
 800047e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000480:	b29b      	uxth	r3, r3
 8000482:	b2db      	uxtb	r3, r3
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40004400 	.word	0x40004400

08000490 <uart2_write>:
void uart2_write(uint8_t ch)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	0002      	movs	r2, r0
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	701a      	strb	r2, [r3, #0]
	//while(*ch)
	{
	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART2->ISR & SR_TXE));
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <uart2_write+0x2c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	4013      	ands	r3, r2
 80004a6:	d0fa      	beq.n	800049e <uart2_write+0xe>
	USART2->TDR = (ch&0xff);
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <uart2_write+0x2c>)
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	8513      	strh	r3, [r2, #40]	; 0x28
	//for(int i=0; i<1000; i++);
	//ch++;
	}
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40004400 	.word	0x40004400

080004c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e00a      	b.n	80004e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d2:	e000      	b.n	80004d6 <_read+0x16>
 80004d4:	bf00      	nop
 80004d6:	0001      	movs	r1, r0
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	b2ca      	uxtb	r2, r1
 80004e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbf0      	blt.n	80004d2 <_read+0x12>
  }

  return len;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b006      	add	sp, #24
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b086      	sub	sp, #24
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e009      	b.n	8000520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0018      	movs	r0, r3
 8000516:	f7ff feb7 	bl	8000288 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbf1      	blt.n	800050c <_write+0x12>
  }
  return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	0018      	movs	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	b006      	add	sp, #24
 8000530:	bd80      	pop	{r7, pc}

08000532 <_close>:

int _close(int file)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b082      	sub	sp, #8
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800053a:	2301      	movs	r3, #1
 800053c:	425b      	negs	r3, r3
}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}

08000546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	0192      	lsls	r2, r2, #6
 8000556:	605a      	str	r2, [r3, #4]
  return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}

08000562 <_isatty>:

int _isatty(int file)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800056a:	2301      	movs	r3, #1
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}

08000574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000580:	2300      	movs	r3, #0
}
 8000582:	0018      	movs	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	b004      	add	sp, #16
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	18d3      	adds	r3, r2, r3
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f000 f9b6 	bl	800092c <__errno>
 80005c0:	0003      	movs	r3, r0
 80005c2:	220c      	movs	r2, #12
 80005c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	425b      	negs	r3, r3
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	18d2      	adds	r2, r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <_sbrk+0x64>)
 80005dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b006      	add	sp, #24
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20002000 	.word	0x20002000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	2000007c 	.word	0x2000007c
 80005f4:	200001d0 	.word	0x200001d0

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005fc:	e000      	b.n	8000600 <Reset_Handler+0x8>
 80005fe:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000626:	f000 f987 	bl	8000938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fe3b 	bl	80002a4 <main>

0800062e <LoopForever>:

LoopForever:
  b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800063c:	08001000 	.word	0x08001000
  ldr r2, =_sbss
 8000640:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000644:	200001cc 	.word	0x200001cc

08000648 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC_IRQHandler>
	...

0800064c <std>:
 800064c:	2300      	movs	r3, #0
 800064e:	b510      	push	{r4, lr}
 8000650:	0004      	movs	r4, r0
 8000652:	6003      	str	r3, [r0, #0]
 8000654:	6043      	str	r3, [r0, #4]
 8000656:	6083      	str	r3, [r0, #8]
 8000658:	8181      	strh	r1, [r0, #12]
 800065a:	6643      	str	r3, [r0, #100]	; 0x64
 800065c:	81c2      	strh	r2, [r0, #14]
 800065e:	6103      	str	r3, [r0, #16]
 8000660:	6143      	str	r3, [r0, #20]
 8000662:	6183      	str	r3, [r0, #24]
 8000664:	0019      	movs	r1, r3
 8000666:	2208      	movs	r2, #8
 8000668:	305c      	adds	r0, #92	; 0x5c
 800066a:	f000 f909 	bl	8000880 <memset>
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <std+0x50>)
 8000670:	6224      	str	r4, [r4, #32]
 8000672:	6263      	str	r3, [r4, #36]	; 0x24
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <std+0x54>)
 8000676:	62a3      	str	r3, [r4, #40]	; 0x28
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <std+0x58>)
 800067a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <std+0x5c>)
 800067e:	6323      	str	r3, [r4, #48]	; 0x30
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <std+0x60>)
 8000682:	429c      	cmp	r4, r3
 8000684:	d005      	beq.n	8000692 <std+0x46>
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <std+0x64>)
 8000688:	429c      	cmp	r4, r3
 800068a:	d002      	beq.n	8000692 <std+0x46>
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <std+0x68>)
 800068e:	429c      	cmp	r4, r3
 8000690:	d103      	bne.n	800069a <std+0x4e>
 8000692:	0020      	movs	r0, r4
 8000694:	3058      	adds	r0, #88	; 0x58
 8000696:	f000 f973 	bl	8000980 <__retarget_lock_init_recursive>
 800069a:	bd10      	pop	{r4, pc}
 800069c:	080007e9 	.word	0x080007e9
 80006a0:	08000811 	.word	0x08000811
 80006a4:	08000849 	.word	0x08000849
 80006a8:	08000875 	.word	0x08000875
 80006ac:	20000080 	.word	0x20000080
 80006b0:	200000e8 	.word	0x200000e8
 80006b4:	20000150 	.word	0x20000150

080006b8 <stdio_exit_handler>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <stdio_exit_handler+0x10>)
 80006bc:	4903      	ldr	r1, [pc, #12]	; (80006cc <stdio_exit_handler+0x14>)
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <stdio_exit_handler+0x18>)
 80006c0:	f000 f86c 	bl	800079c <_fwalk_sglue>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000000 	.word	0x20000000
 80006cc:	08000c99 	.word	0x08000c99
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <cleanup_stdio>:
 80006d4:	6841      	ldr	r1, [r0, #4]
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <cleanup_stdio+0x30>)
 80006d8:	b510      	push	{r4, lr}
 80006da:	0004      	movs	r4, r0
 80006dc:	4299      	cmp	r1, r3
 80006de:	d001      	beq.n	80006e4 <cleanup_stdio+0x10>
 80006e0:	f000 fada 	bl	8000c98 <_fflush_r>
 80006e4:	68a1      	ldr	r1, [r4, #8]
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <cleanup_stdio+0x34>)
 80006e8:	4299      	cmp	r1, r3
 80006ea:	d002      	beq.n	80006f2 <cleanup_stdio+0x1e>
 80006ec:	0020      	movs	r0, r4
 80006ee:	f000 fad3 	bl	8000c98 <_fflush_r>
 80006f2:	68e1      	ldr	r1, [r4, #12]
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <cleanup_stdio+0x38>)
 80006f6:	4299      	cmp	r1, r3
 80006f8:	d002      	beq.n	8000700 <cleanup_stdio+0x2c>
 80006fa:	0020      	movs	r0, r4
 80006fc:	f000 facc 	bl	8000c98 <_fflush_r>
 8000700:	bd10      	pop	{r4, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000080 	.word	0x20000080
 8000708:	200000e8 	.word	0x200000e8
 800070c:	20000150 	.word	0x20000150

08000710 <global_stdio_init.part.0>:
 8000710:	b510      	push	{r4, lr}
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <global_stdio_init.part.0+0x28>)
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <global_stdio_init.part.0+0x2c>)
 8000716:	2104      	movs	r1, #4
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <global_stdio_init.part.0+0x30>)
 800071c:	2200      	movs	r2, #0
 800071e:	f7ff ff95 	bl	800064c <std>
 8000722:	2201      	movs	r2, #1
 8000724:	2109      	movs	r1, #9
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <global_stdio_init.part.0+0x34>)
 8000728:	f7ff ff90 	bl	800064c <std>
 800072c:	2202      	movs	r2, #2
 800072e:	2112      	movs	r1, #18
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <global_stdio_init.part.0+0x38>)
 8000732:	f7ff ff8b 	bl	800064c <std>
 8000736:	bd10      	pop	{r4, pc}
 8000738:	200001b8 	.word	0x200001b8
 800073c:	080006b9 	.word	0x080006b9
 8000740:	20000080 	.word	0x20000080
 8000744:	200000e8 	.word	0x200000e8
 8000748:	20000150 	.word	0x20000150

0800074c <__sfp_lock_acquire>:
 800074c:	b510      	push	{r4, lr}
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <__sfp_lock_acquire+0xc>)
 8000750:	f000 f917 	bl	8000982 <__retarget_lock_acquire_recursive>
 8000754:	bd10      	pop	{r4, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	200001c1 	.word	0x200001c1

0800075c <__sfp_lock_release>:
 800075c:	b510      	push	{r4, lr}
 800075e:	4802      	ldr	r0, [pc, #8]	; (8000768 <__sfp_lock_release+0xc>)
 8000760:	f000 f910 	bl	8000984 <__retarget_lock_release_recursive>
 8000764:	bd10      	pop	{r4, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	200001c1 	.word	0x200001c1

0800076c <__sinit>:
 800076c:	b510      	push	{r4, lr}
 800076e:	0004      	movs	r4, r0
 8000770:	f7ff ffec 	bl	800074c <__sfp_lock_acquire>
 8000774:	6a23      	ldr	r3, [r4, #32]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <__sinit+0x14>
 800077a:	f7ff ffef 	bl	800075c <__sfp_lock_release>
 800077e:	bd10      	pop	{r4, pc}
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__sinit+0x28>)
 8000782:	6223      	str	r3, [r4, #32]
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__sinit+0x2c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f6      	bne.n	800077a <__sinit+0xe>
 800078c:	f7ff ffc0 	bl	8000710 <global_stdio_init.part.0>
 8000790:	e7f3      	b.n	800077a <__sinit+0xe>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	080006d5 	.word	0x080006d5
 8000798:	200001b8 	.word	0x200001b8

0800079c <_fwalk_sglue>:
 800079c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800079e:	0014      	movs	r4, r2
 80007a0:	2600      	movs	r6, #0
 80007a2:	9000      	str	r0, [sp, #0]
 80007a4:	9101      	str	r1, [sp, #4]
 80007a6:	68a5      	ldr	r5, [r4, #8]
 80007a8:	6867      	ldr	r7, [r4, #4]
 80007aa:	3f01      	subs	r7, #1
 80007ac:	d504      	bpl.n	80007b8 <_fwalk_sglue+0x1c>
 80007ae:	6824      	ldr	r4, [r4, #0]
 80007b0:	2c00      	cmp	r4, #0
 80007b2:	d1f8      	bne.n	80007a6 <_fwalk_sglue+0xa>
 80007b4:	0030      	movs	r0, r6
 80007b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80007b8:	89ab      	ldrh	r3, [r5, #12]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d908      	bls.n	80007d0 <_fwalk_sglue+0x34>
 80007be:	220e      	movs	r2, #14
 80007c0:	5eab      	ldrsh	r3, [r5, r2]
 80007c2:	3301      	adds	r3, #1
 80007c4:	d004      	beq.n	80007d0 <_fwalk_sglue+0x34>
 80007c6:	0029      	movs	r1, r5
 80007c8:	9800      	ldr	r0, [sp, #0]
 80007ca:	9b01      	ldr	r3, [sp, #4]
 80007cc:	4798      	blx	r3
 80007ce:	4306      	orrs	r6, r0
 80007d0:	3568      	adds	r5, #104	; 0x68
 80007d2:	e7ea      	b.n	80007aa <_fwalk_sglue+0xe>

080007d4 <putchar>:
 80007d4:	b510      	push	{r4, lr}
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <putchar+0x10>)
 80007d8:	0001      	movs	r1, r0
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	6882      	ldr	r2, [r0, #8]
 80007de:	f000 fa86 	bl	8000cee <_putc_r>
 80007e2:	bd10      	pop	{r4, pc}
 80007e4:	20000058 	.word	0x20000058

080007e8 <__sread>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	000c      	movs	r4, r1
 80007ec:	250e      	movs	r5, #14
 80007ee:	5f49      	ldrsh	r1, [r1, r5]
 80007f0:	f000 f874 	bl	80008dc <_read_r>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	db03      	blt.n	8000800 <__sread+0x18>
 80007f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80007fa:	181b      	adds	r3, r3, r0
 80007fc:	6563      	str	r3, [r4, #84]	; 0x54
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	89a3      	ldrh	r3, [r4, #12]
 8000802:	4a02      	ldr	r2, [pc, #8]	; (800080c <__sread+0x24>)
 8000804:	4013      	ands	r3, r2
 8000806:	81a3      	strh	r3, [r4, #12]
 8000808:	e7f9      	b.n	80007fe <__sread+0x16>
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	ffffefff 	.word	0xffffefff

08000810 <__swrite>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	001f      	movs	r7, r3
 8000814:	898b      	ldrh	r3, [r1, #12]
 8000816:	0005      	movs	r5, r0
 8000818:	000c      	movs	r4, r1
 800081a:	0016      	movs	r6, r2
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	d505      	bpl.n	800082c <__swrite+0x1c>
 8000820:	230e      	movs	r3, #14
 8000822:	5ec9      	ldrsh	r1, [r1, r3]
 8000824:	2200      	movs	r2, #0
 8000826:	2302      	movs	r3, #2
 8000828:	f000 f844 	bl	80008b4 <_lseek_r>
 800082c:	89a3      	ldrh	r3, [r4, #12]
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <__swrite+0x34>)
 8000830:	0028      	movs	r0, r5
 8000832:	4013      	ands	r3, r2
 8000834:	81a3      	strh	r3, [r4, #12]
 8000836:	0032      	movs	r2, r6
 8000838:	230e      	movs	r3, #14
 800083a:	5ee1      	ldrsh	r1, [r4, r3]
 800083c:	003b      	movs	r3, r7
 800083e:	f000 f861 	bl	8000904 <_write_r>
 8000842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000844:	ffffefff 	.word	0xffffefff

08000848 <__sseek>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	000c      	movs	r4, r1
 800084c:	250e      	movs	r5, #14
 800084e:	5f49      	ldrsh	r1, [r1, r5]
 8000850:	f000 f830 	bl	80008b4 <_lseek_r>
 8000854:	89a3      	ldrh	r3, [r4, #12]
 8000856:	1c42      	adds	r2, r0, #1
 8000858:	d103      	bne.n	8000862 <__sseek+0x1a>
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <__sseek+0x28>)
 800085c:	4013      	ands	r3, r2
 800085e:	81a3      	strh	r3, [r4, #12]
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0152      	lsls	r2, r2, #5
 8000866:	4313      	orrs	r3, r2
 8000868:	81a3      	strh	r3, [r4, #12]
 800086a:	6560      	str	r0, [r4, #84]	; 0x54
 800086c:	e7f8      	b.n	8000860 <__sseek+0x18>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	ffffefff 	.word	0xffffefff

08000874 <__sclose>:
 8000874:	b510      	push	{r4, lr}
 8000876:	230e      	movs	r3, #14
 8000878:	5ec9      	ldrsh	r1, [r1, r3]
 800087a:	f000 f809 	bl	8000890 <_close_r>
 800087e:	bd10      	pop	{r4, pc}

08000880 <memset>:
 8000880:	0003      	movs	r3, r0
 8000882:	1882      	adds	r2, r0, r2
 8000884:	4293      	cmp	r3, r2
 8000886:	d100      	bne.n	800088a <memset+0xa>
 8000888:	4770      	bx	lr
 800088a:	7019      	strb	r1, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	e7f9      	b.n	8000884 <memset+0x4>

08000890 <_close_r>:
 8000890:	2300      	movs	r3, #0
 8000892:	b570      	push	{r4, r5, r6, lr}
 8000894:	4d06      	ldr	r5, [pc, #24]	; (80008b0 <_close_r+0x20>)
 8000896:	0004      	movs	r4, r0
 8000898:	0008      	movs	r0, r1
 800089a:	602b      	str	r3, [r5, #0]
 800089c:	f7ff fe49 	bl	8000532 <_close>
 80008a0:	1c43      	adds	r3, r0, #1
 80008a2:	d103      	bne.n	80008ac <_close_r+0x1c>
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d000      	beq.n	80008ac <_close_r+0x1c>
 80008aa:	6023      	str	r3, [r4, #0]
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	200001bc 	.word	0x200001bc

080008b4 <_lseek_r>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	0004      	movs	r4, r0
 80008b8:	0008      	movs	r0, r1
 80008ba:	0011      	movs	r1, r2
 80008bc:	001a      	movs	r2, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	4d05      	ldr	r5, [pc, #20]	; (80008d8 <_lseek_r+0x24>)
 80008c2:	602b      	str	r3, [r5, #0]
 80008c4:	f7ff fe56 	bl	8000574 <_lseek>
 80008c8:	1c43      	adds	r3, r0, #1
 80008ca:	d103      	bne.n	80008d4 <_lseek_r+0x20>
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d000      	beq.n	80008d4 <_lseek_r+0x20>
 80008d2:	6023      	str	r3, [r4, #0]
 80008d4:	bd70      	pop	{r4, r5, r6, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200001bc 	.word	0x200001bc

080008dc <_read_r>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	0004      	movs	r4, r0
 80008e0:	0008      	movs	r0, r1
 80008e2:	0011      	movs	r1, r2
 80008e4:	001a      	movs	r2, r3
 80008e6:	2300      	movs	r3, #0
 80008e8:	4d05      	ldr	r5, [pc, #20]	; (8000900 <_read_r+0x24>)
 80008ea:	602b      	str	r3, [r5, #0]
 80008ec:	f7ff fde8 	bl	80004c0 <_read>
 80008f0:	1c43      	adds	r3, r0, #1
 80008f2:	d103      	bne.n	80008fc <_read_r+0x20>
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <_read_r+0x20>
 80008fa:	6023      	str	r3, [r4, #0]
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	200001bc 	.word	0x200001bc

08000904 <_write_r>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	0004      	movs	r4, r0
 8000908:	0008      	movs	r0, r1
 800090a:	0011      	movs	r1, r2
 800090c:	001a      	movs	r2, r3
 800090e:	2300      	movs	r3, #0
 8000910:	4d05      	ldr	r5, [pc, #20]	; (8000928 <_write_r+0x24>)
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	f7ff fdf1 	bl	80004fa <_write>
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	d103      	bne.n	8000924 <_write_r+0x20>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d000      	beq.n	8000924 <_write_r+0x20>
 8000922:	6023      	str	r3, [r4, #0]
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200001bc 	.word	0x200001bc

0800092c <__errno>:
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <__errno+0x8>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000058 	.word	0x20000058

08000938 <__libc_init_array>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	2600      	movs	r6, #0
 800093c:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x38>)
 800093e:	4d0d      	ldr	r5, [pc, #52]	; (8000974 <__libc_init_array+0x3c>)
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	10a4      	asrs	r4, r4, #2
 8000944:	42a6      	cmp	r6, r4
 8000946:	d109      	bne.n	800095c <__libc_init_array+0x24>
 8000948:	2600      	movs	r6, #0
 800094a:	f000 fb49 	bl	8000fe0 <_init>
 800094e:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <__libc_init_array+0x40>)
 8000950:	4d0a      	ldr	r5, [pc, #40]	; (800097c <__libc_init_array+0x44>)
 8000952:	1b64      	subs	r4, r4, r5
 8000954:	10a4      	asrs	r4, r4, #2
 8000956:	42a6      	cmp	r6, r4
 8000958:	d105      	bne.n	8000966 <__libc_init_array+0x2e>
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	00b3      	lsls	r3, r6, #2
 800095e:	58eb      	ldr	r3, [r5, r3]
 8000960:	4798      	blx	r3
 8000962:	3601      	adds	r6, #1
 8000964:	e7ee      	b.n	8000944 <__libc_init_array+0xc>
 8000966:	00b3      	lsls	r3, r6, #2
 8000968:	58eb      	ldr	r3, [r5, r3]
 800096a:	4798      	blx	r3
 800096c:	3601      	adds	r6, #1
 800096e:	e7f2      	b.n	8000956 <__libc_init_array+0x1e>
 8000970:	08000ff8 	.word	0x08000ff8
 8000974:	08000ff8 	.word	0x08000ff8
 8000978:	08000ffc 	.word	0x08000ffc
 800097c:	08000ff8 	.word	0x08000ff8

08000980 <__retarget_lock_init_recursive>:
 8000980:	4770      	bx	lr

08000982 <__retarget_lock_acquire_recursive>:
 8000982:	4770      	bx	lr

08000984 <__retarget_lock_release_recursive>:
 8000984:	4770      	bx	lr
	...

08000988 <_free_r>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	0005      	movs	r5, r0
 800098c:	2900      	cmp	r1, #0
 800098e:	d010      	beq.n	80009b2 <_free_r+0x2a>
 8000990:	1f0c      	subs	r4, r1, #4
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	da00      	bge.n	800099a <_free_r+0x12>
 8000998:	18e4      	adds	r4, r4, r3
 800099a:	0028      	movs	r0, r5
 800099c:	f000 f8e2 	bl	8000b64 <__malloc_lock>
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <_free_r+0x90>)
 80009a2:	6813      	ldr	r3, [r2, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d105      	bne.n	80009b4 <_free_r+0x2c>
 80009a8:	6063      	str	r3, [r4, #4]
 80009aa:	6014      	str	r4, [r2, #0]
 80009ac:	0028      	movs	r0, r5
 80009ae:	f000 f8e1 	bl	8000b74 <__malloc_unlock>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	d908      	bls.n	80009ca <_free_r+0x42>
 80009b8:	6820      	ldr	r0, [r4, #0]
 80009ba:	1821      	adds	r1, r4, r0
 80009bc:	428b      	cmp	r3, r1
 80009be:	d1f3      	bne.n	80009a8 <_free_r+0x20>
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	1809      	adds	r1, r1, r0
 80009c6:	6021      	str	r1, [r4, #0]
 80009c8:	e7ee      	b.n	80009a8 <_free_r+0x20>
 80009ca:	001a      	movs	r2, r3
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <_free_r+0x4e>
 80009d2:	42a3      	cmp	r3, r4
 80009d4:	d9f9      	bls.n	80009ca <_free_r+0x42>
 80009d6:	6811      	ldr	r1, [r2, #0]
 80009d8:	1850      	adds	r0, r2, r1
 80009da:	42a0      	cmp	r0, r4
 80009dc:	d10b      	bne.n	80009f6 <_free_r+0x6e>
 80009de:	6820      	ldr	r0, [r4, #0]
 80009e0:	1809      	adds	r1, r1, r0
 80009e2:	1850      	adds	r0, r2, r1
 80009e4:	6011      	str	r1, [r2, #0]
 80009e6:	4283      	cmp	r3, r0
 80009e8:	d1e0      	bne.n	80009ac <_free_r+0x24>
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	1841      	adds	r1, r0, r1
 80009f0:	6011      	str	r1, [r2, #0]
 80009f2:	6053      	str	r3, [r2, #4]
 80009f4:	e7da      	b.n	80009ac <_free_r+0x24>
 80009f6:	42a0      	cmp	r0, r4
 80009f8:	d902      	bls.n	8000a00 <_free_r+0x78>
 80009fa:	230c      	movs	r3, #12
 80009fc:	602b      	str	r3, [r5, #0]
 80009fe:	e7d5      	b.n	80009ac <_free_r+0x24>
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	1821      	adds	r1, r4, r0
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d103      	bne.n	8000a10 <_free_r+0x88>
 8000a08:	6819      	ldr	r1, [r3, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	1809      	adds	r1, r1, r0
 8000a0e:	6021      	str	r1, [r4, #0]
 8000a10:	6063      	str	r3, [r4, #4]
 8000a12:	6054      	str	r4, [r2, #4]
 8000a14:	e7ca      	b.n	80009ac <_free_r+0x24>
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	200001c4 	.word	0x200001c4

08000a1c <sbrk_aligned>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4e0f      	ldr	r6, [pc, #60]	; (8000a5c <sbrk_aligned+0x40>)
 8000a20:	000d      	movs	r5, r1
 8000a22:	6831      	ldr	r1, [r6, #0]
 8000a24:	0004      	movs	r4, r0
 8000a26:	2900      	cmp	r1, #0
 8000a28:	d102      	bne.n	8000a30 <sbrk_aligned+0x14>
 8000a2a:	f000 fa3d 	bl	8000ea8 <_sbrk_r>
 8000a2e:	6030      	str	r0, [r6, #0]
 8000a30:	0029      	movs	r1, r5
 8000a32:	0020      	movs	r0, r4
 8000a34:	f000 fa38 	bl	8000ea8 <_sbrk_r>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d00a      	beq.n	8000a52 <sbrk_aligned+0x36>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	1cc5      	adds	r5, r0, #3
 8000a40:	439d      	bics	r5, r3
 8000a42:	42a8      	cmp	r0, r5
 8000a44:	d007      	beq.n	8000a56 <sbrk_aligned+0x3a>
 8000a46:	1a29      	subs	r1, r5, r0
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f000 fa2d 	bl	8000ea8 <_sbrk_r>
 8000a4e:	3001      	adds	r0, #1
 8000a50:	d101      	bne.n	8000a56 <sbrk_aligned+0x3a>
 8000a52:	2501      	movs	r5, #1
 8000a54:	426d      	negs	r5, r5
 8000a56:	0028      	movs	r0, r5
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	200001c8 	.word	0x200001c8

08000a60 <_malloc_r>:
 8000a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a62:	2203      	movs	r2, #3
 8000a64:	1ccb      	adds	r3, r1, #3
 8000a66:	4393      	bics	r3, r2
 8000a68:	3308      	adds	r3, #8
 8000a6a:	0006      	movs	r6, r0
 8000a6c:	001f      	movs	r7, r3
 8000a6e:	2b0c      	cmp	r3, #12
 8000a70:	d238      	bcs.n	8000ae4 <_malloc_r+0x84>
 8000a72:	270c      	movs	r7, #12
 8000a74:	42b9      	cmp	r1, r7
 8000a76:	d837      	bhi.n	8000ae8 <_malloc_r+0x88>
 8000a78:	0030      	movs	r0, r6
 8000a7a:	f000 f873 	bl	8000b64 <__malloc_lock>
 8000a7e:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <_malloc_r+0x100>)
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	001c      	movs	r4, r3
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d133      	bne.n	8000af2 <_malloc_r+0x92>
 8000a8a:	0039      	movs	r1, r7
 8000a8c:	0030      	movs	r0, r6
 8000a8e:	f7ff ffc5 	bl	8000a1c <sbrk_aligned>
 8000a92:	0004      	movs	r4, r0
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	d15e      	bne.n	8000b56 <_malloc_r+0xf6>
 8000a98:	9b00      	ldr	r3, [sp, #0]
 8000a9a:	681c      	ldr	r4, [r3, #0]
 8000a9c:	0025      	movs	r5, r4
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d14e      	bne.n	8000b40 <_malloc_r+0xe0>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d051      	beq.n	8000b4a <_malloc_r+0xea>
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	0029      	movs	r1, r5
 8000aaa:	18e3      	adds	r3, r4, r3
 8000aac:	0030      	movs	r0, r6
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	f000 f9fa 	bl	8000ea8 <_sbrk_r>
 8000ab4:	9b01      	ldr	r3, [sp, #4]
 8000ab6:	4283      	cmp	r3, r0
 8000ab8:	d147      	bne.n	8000b4a <_malloc_r+0xea>
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	0030      	movs	r0, r6
 8000abe:	1aff      	subs	r7, r7, r3
 8000ac0:	0039      	movs	r1, r7
 8000ac2:	f7ff ffab 	bl	8000a1c <sbrk_aligned>
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	d03f      	beq.n	8000b4a <_malloc_r+0xea>
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	19db      	adds	r3, r3, r7
 8000ace:	6023      	str	r3, [r4, #0]
 8000ad0:	9b00      	ldr	r3, [sp, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d040      	beq.n	8000b5a <_malloc_r+0xfa>
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	42a2      	cmp	r2, r4
 8000adc:	d133      	bne.n	8000b46 <_malloc_r+0xe6>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	e014      	b.n	8000b0e <_malloc_r+0xae>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dac5      	bge.n	8000a74 <_malloc_r+0x14>
 8000ae8:	230c      	movs	r3, #12
 8000aea:	2500      	movs	r5, #0
 8000aec:	6033      	str	r3, [r6, #0]
 8000aee:	0028      	movs	r0, r5
 8000af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000af2:	6821      	ldr	r1, [r4, #0]
 8000af4:	1bc9      	subs	r1, r1, r7
 8000af6:	d420      	bmi.n	8000b3a <_malloc_r+0xda>
 8000af8:	290b      	cmp	r1, #11
 8000afa:	d918      	bls.n	8000b2e <_malloc_r+0xce>
 8000afc:	19e2      	adds	r2, r4, r7
 8000afe:	6027      	str	r7, [r4, #0]
 8000b00:	42a3      	cmp	r3, r4
 8000b02:	d112      	bne.n	8000b2a <_malloc_r+0xca>
 8000b04:	9b00      	ldr	r3, [sp, #0]
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	6011      	str	r1, [r2, #0]
 8000b0c:	6053      	str	r3, [r2, #4]
 8000b0e:	0030      	movs	r0, r6
 8000b10:	0025      	movs	r5, r4
 8000b12:	f000 f82f 	bl	8000b74 <__malloc_unlock>
 8000b16:	2207      	movs	r2, #7
 8000b18:	350b      	adds	r5, #11
 8000b1a:	1d23      	adds	r3, r4, #4
 8000b1c:	4395      	bics	r5, r2
 8000b1e:	1aea      	subs	r2, r5, r3
 8000b20:	429d      	cmp	r5, r3
 8000b22:	d0e4      	beq.n	8000aee <_malloc_r+0x8e>
 8000b24:	1b5b      	subs	r3, r3, r5
 8000b26:	50a3      	str	r3, [r4, r2]
 8000b28:	e7e1      	b.n	8000aee <_malloc_r+0x8e>
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	e7ec      	b.n	8000b08 <_malloc_r+0xa8>
 8000b2e:	6862      	ldr	r2, [r4, #4]
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d1d5      	bne.n	8000ae0 <_malloc_r+0x80>
 8000b34:	9b00      	ldr	r3, [sp, #0]
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e7e9      	b.n	8000b0e <_malloc_r+0xae>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	6864      	ldr	r4, [r4, #4]
 8000b3e:	e7a2      	b.n	8000a86 <_malloc_r+0x26>
 8000b40:	002c      	movs	r4, r5
 8000b42:	686d      	ldr	r5, [r5, #4]
 8000b44:	e7ab      	b.n	8000a9e <_malloc_r+0x3e>
 8000b46:	0013      	movs	r3, r2
 8000b48:	e7c4      	b.n	8000ad4 <_malloc_r+0x74>
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	0030      	movs	r0, r6
 8000b4e:	6033      	str	r3, [r6, #0]
 8000b50:	f000 f810 	bl	8000b74 <__malloc_unlock>
 8000b54:	e7cb      	b.n	8000aee <_malloc_r+0x8e>
 8000b56:	6027      	str	r7, [r4, #0]
 8000b58:	e7d9      	b.n	8000b0e <_malloc_r+0xae>
 8000b5a:	605b      	str	r3, [r3, #4]
 8000b5c:	deff      	udf	#255	; 0xff
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	200001c4 	.word	0x200001c4

08000b64 <__malloc_lock>:
 8000b64:	b510      	push	{r4, lr}
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <__malloc_lock+0xc>)
 8000b68:	f7ff ff0b 	bl	8000982 <__retarget_lock_acquire_recursive>
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200001c0 	.word	0x200001c0

08000b74 <__malloc_unlock>:
 8000b74:	b510      	push	{r4, lr}
 8000b76:	4802      	ldr	r0, [pc, #8]	; (8000b80 <__malloc_unlock+0xc>)
 8000b78:	f7ff ff04 	bl	8000984 <__retarget_lock_release_recursive>
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200001c0 	.word	0x200001c0

08000b84 <__sflush_r>:
 8000b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b86:	898b      	ldrh	r3, [r1, #12]
 8000b88:	0005      	movs	r5, r0
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	071a      	lsls	r2, r3, #28
 8000b8e:	d45c      	bmi.n	8000c4a <__sflush_r+0xc6>
 8000b90:	684a      	ldr	r2, [r1, #4]
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	dc04      	bgt.n	8000ba0 <__sflush_r+0x1c>
 8000b96:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	dc01      	bgt.n	8000ba0 <__sflush_r+0x1c>
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ba0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000ba2:	2f00      	cmp	r7, #0
 8000ba4:	d0fa      	beq.n	8000b9c <__sflush_r+0x18>
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2080      	movs	r0, #128	; 0x80
 8000baa:	682e      	ldr	r6, [r5, #0]
 8000bac:	602a      	str	r2, [r5, #0]
 8000bae:	001a      	movs	r2, r3
 8000bb0:	0140      	lsls	r0, r0, #5
 8000bb2:	6a21      	ldr	r1, [r4, #32]
 8000bb4:	4002      	ands	r2, r0
 8000bb6:	4203      	tst	r3, r0
 8000bb8:	d034      	beq.n	8000c24 <__sflush_r+0xa0>
 8000bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	075b      	lsls	r3, r3, #29
 8000bc0:	d506      	bpl.n	8000bd0 <__sflush_r+0x4c>
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	1ac0      	subs	r0, r0, r3
 8000bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <__sflush_r+0x4c>
 8000bcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bce:	1ac0      	subs	r0, r0, r3
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000bd8:	6a21      	ldr	r1, [r4, #32]
 8000bda:	47b8      	blx	r7
 8000bdc:	89a2      	ldrh	r2, [r4, #12]
 8000bde:	1c43      	adds	r3, r0, #1
 8000be0:	d106      	bne.n	8000bf0 <__sflush_r+0x6c>
 8000be2:	6829      	ldr	r1, [r5, #0]
 8000be4:	291d      	cmp	r1, #29
 8000be6:	d82c      	bhi.n	8000c42 <__sflush_r+0xbe>
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <__sflush_r+0x110>)
 8000bea:	410b      	asrs	r3, r1
 8000bec:	07db      	lsls	r3, r3, #31
 8000bee:	d428      	bmi.n	8000c42 <__sflush_r+0xbe>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	6063      	str	r3, [r4, #4]
 8000bf4:	6923      	ldr	r3, [r4, #16]
 8000bf6:	6023      	str	r3, [r4, #0]
 8000bf8:	04d2      	lsls	r2, r2, #19
 8000bfa:	d505      	bpl.n	8000c08 <__sflush_r+0x84>
 8000bfc:	1c43      	adds	r3, r0, #1
 8000bfe:	d102      	bne.n	8000c06 <__sflush_r+0x82>
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d100      	bne.n	8000c08 <__sflush_r+0x84>
 8000c06:	6560      	str	r0, [r4, #84]	; 0x54
 8000c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c0a:	602e      	str	r6, [r5, #0]
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d0c5      	beq.n	8000b9c <__sflush_r+0x18>
 8000c10:	0023      	movs	r3, r4
 8000c12:	3344      	adds	r3, #68	; 0x44
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d002      	beq.n	8000c1e <__sflush_r+0x9a>
 8000c18:	0028      	movs	r0, r5
 8000c1a:	f7ff feb5 	bl	8000988 <_free_r>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	6360      	str	r0, [r4, #52]	; 0x34
 8000c22:	e7bc      	b.n	8000b9e <__sflush_r+0x1a>
 8000c24:	2301      	movs	r3, #1
 8000c26:	0028      	movs	r0, r5
 8000c28:	47b8      	blx	r7
 8000c2a:	1c43      	adds	r3, r0, #1
 8000c2c:	d1c6      	bne.n	8000bbc <__sflush_r+0x38>
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0c3      	beq.n	8000bbc <__sflush_r+0x38>
 8000c34:	2b1d      	cmp	r3, #29
 8000c36:	d001      	beq.n	8000c3c <__sflush_r+0xb8>
 8000c38:	2b16      	cmp	r3, #22
 8000c3a:	d101      	bne.n	8000c40 <__sflush_r+0xbc>
 8000c3c:	602e      	str	r6, [r5, #0]
 8000c3e:	e7ad      	b.n	8000b9c <__sflush_r+0x18>
 8000c40:	89a2      	ldrh	r2, [r4, #12]
 8000c42:	2340      	movs	r3, #64	; 0x40
 8000c44:	4313      	orrs	r3, r2
 8000c46:	81a3      	strh	r3, [r4, #12]
 8000c48:	e7a9      	b.n	8000b9e <__sflush_r+0x1a>
 8000c4a:	690e      	ldr	r6, [r1, #16]
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0a5      	beq.n	8000b9c <__sflush_r+0x18>
 8000c50:	680f      	ldr	r7, [r1, #0]
 8000c52:	600e      	str	r6, [r1, #0]
 8000c54:	1bba      	subs	r2, r7, r6
 8000c56:	9201      	str	r2, [sp, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	079b      	lsls	r3, r3, #30
 8000c5c:	d100      	bne.n	8000c60 <__sflush_r+0xdc>
 8000c5e:	694a      	ldr	r2, [r1, #20]
 8000c60:	60a2      	str	r2, [r4, #8]
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dd99      	ble.n	8000b9c <__sflush_r+0x18>
 8000c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c6a:	0032      	movs	r2, r6
 8000c6c:	001f      	movs	r7, r3
 8000c6e:	0028      	movs	r0, r5
 8000c70:	9b01      	ldr	r3, [sp, #4]
 8000c72:	6a21      	ldr	r1, [r4, #32]
 8000c74:	47b8      	blx	r7
 8000c76:	2800      	cmp	r0, #0
 8000c78:	dc06      	bgt.n	8000c88 <__sflush_r+0x104>
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	89a2      	ldrh	r2, [r4, #12]
 8000c80:	4240      	negs	r0, r0
 8000c82:	4313      	orrs	r3, r2
 8000c84:	81a3      	strh	r3, [r4, #12]
 8000c86:	e78a      	b.n	8000b9e <__sflush_r+0x1a>
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	1836      	adds	r6, r6, r0
 8000c8c:	1a1b      	subs	r3, r3, r0
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	e7e7      	b.n	8000c62 <__sflush_r+0xde>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	dfbffffe 	.word	0xdfbffffe

08000c98 <_fflush_r>:
 8000c98:	690b      	ldr	r3, [r1, #16]
 8000c9a:	b570      	push	{r4, r5, r6, lr}
 8000c9c:	0005      	movs	r5, r0
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_fflush_r+0x12>
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d004      	beq.n	8000cb8 <_fflush_r+0x20>
 8000cae:	6a03      	ldr	r3, [r0, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <_fflush_r+0x20>
 8000cb4:	f7ff fd5a 	bl	800076c <__sinit>
 8000cb8:	220c      	movs	r2, #12
 8000cba:	5ea3      	ldrsh	r3, [r4, r2]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f1      	beq.n	8000ca4 <_fflush_r+0xc>
 8000cc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cc2:	07d2      	lsls	r2, r2, #31
 8000cc4:	d404      	bmi.n	8000cd0 <_fflush_r+0x38>
 8000cc6:	059b      	lsls	r3, r3, #22
 8000cc8:	d402      	bmi.n	8000cd0 <_fflush_r+0x38>
 8000cca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ccc:	f7ff fe59 	bl	8000982 <__retarget_lock_acquire_recursive>
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	f7ff ff56 	bl	8000b84 <__sflush_r>
 8000cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cda:	0005      	movs	r5, r0
 8000cdc:	07db      	lsls	r3, r3, #31
 8000cde:	d4e2      	bmi.n	8000ca6 <_fflush_r+0xe>
 8000ce0:	89a3      	ldrh	r3, [r4, #12]
 8000ce2:	059b      	lsls	r3, r3, #22
 8000ce4:	d4df      	bmi.n	8000ca6 <_fflush_r+0xe>
 8000ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ce8:	f7ff fe4c 	bl	8000984 <__retarget_lock_release_recursive>
 8000cec:	e7db      	b.n	8000ca6 <_fflush_r+0xe>

08000cee <_putc_r>:
 8000cee:	b570      	push	{r4, r5, r6, lr}
 8000cf0:	0006      	movs	r6, r0
 8000cf2:	000d      	movs	r5, r1
 8000cf4:	0014      	movs	r4, r2
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d004      	beq.n	8000d04 <_putc_r+0x16>
 8000cfa:	6a03      	ldr	r3, [r0, #32]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <_putc_r+0x16>
 8000d00:	f7ff fd34 	bl	800076c <__sinit>
 8000d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d06:	07db      	lsls	r3, r3, #31
 8000d08:	d405      	bmi.n	8000d16 <_putc_r+0x28>
 8000d0a:	89a3      	ldrh	r3, [r4, #12]
 8000d0c:	059b      	lsls	r3, r3, #22
 8000d0e:	d402      	bmi.n	8000d16 <_putc_r+0x28>
 8000d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d12:	f7ff fe36 	bl	8000982 <__retarget_lock_acquire_recursive>
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	60a3      	str	r3, [r4, #8]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	da05      	bge.n	8000d2c <_putc_r+0x3e>
 8000d20:	69a2      	ldr	r2, [r4, #24]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	db12      	blt.n	8000d4c <_putc_r+0x5e>
 8000d26:	b2eb      	uxtb	r3, r5
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	d00f      	beq.n	8000d4c <_putc_r+0x5e>
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	6022      	str	r2, [r4, #0]
 8000d32:	701d      	strb	r5, [r3, #0]
 8000d34:	b2ed      	uxtb	r5, r5
 8000d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d38:	07db      	lsls	r3, r3, #31
 8000d3a:	d405      	bmi.n	8000d48 <_putc_r+0x5a>
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	059b      	lsls	r3, r3, #22
 8000d40:	d402      	bmi.n	8000d48 <_putc_r+0x5a>
 8000d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d44:	f7ff fe1e 	bl	8000984 <__retarget_lock_release_recursive>
 8000d48:	0028      	movs	r0, r5
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	0029      	movs	r1, r5
 8000d4e:	0022      	movs	r2, r4
 8000d50:	0030      	movs	r0, r6
 8000d52:	f000 f802 	bl	8000d5a <__swbuf_r>
 8000d56:	0005      	movs	r5, r0
 8000d58:	e7ed      	b.n	8000d36 <_putc_r+0x48>

08000d5a <__swbuf_r>:
 8000d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5c:	0006      	movs	r6, r0
 8000d5e:	000d      	movs	r5, r1
 8000d60:	0014      	movs	r4, r2
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d004      	beq.n	8000d70 <__swbuf_r+0x16>
 8000d66:	6a03      	ldr	r3, [r0, #32]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <__swbuf_r+0x16>
 8000d6c:	f7ff fcfe 	bl	800076c <__sinit>
 8000d70:	69a3      	ldr	r3, [r4, #24]
 8000d72:	60a3      	str	r3, [r4, #8]
 8000d74:	89a3      	ldrh	r3, [r4, #12]
 8000d76:	071b      	lsls	r3, r3, #28
 8000d78:	d528      	bpl.n	8000dcc <__swbuf_r+0x72>
 8000d7a:	6923      	ldr	r3, [r4, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d025      	beq.n	8000dcc <__swbuf_r+0x72>
 8000d80:	6923      	ldr	r3, [r4, #16]
 8000d82:	6820      	ldr	r0, [r4, #0]
 8000d84:	b2ef      	uxtb	r7, r5
 8000d86:	1ac0      	subs	r0, r0, r3
 8000d88:	6963      	ldr	r3, [r4, #20]
 8000d8a:	b2ed      	uxtb	r5, r5
 8000d8c:	4283      	cmp	r3, r0
 8000d8e:	dc05      	bgt.n	8000d9c <__swbuf_r+0x42>
 8000d90:	0021      	movs	r1, r4
 8000d92:	0030      	movs	r0, r6
 8000d94:	f7ff ff80 	bl	8000c98 <_fflush_r>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d11d      	bne.n	8000dd8 <__swbuf_r+0x7e>
 8000d9c:	68a3      	ldr	r3, [r4, #8]
 8000d9e:	3001      	adds	r0, #1
 8000da0:	3b01      	subs	r3, #1
 8000da2:	60a3      	str	r3, [r4, #8]
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	6022      	str	r2, [r4, #0]
 8000daa:	701f      	strb	r7, [r3, #0]
 8000dac:	6963      	ldr	r3, [r4, #20]
 8000dae:	4283      	cmp	r3, r0
 8000db0:	d004      	beq.n	8000dbc <__swbuf_r+0x62>
 8000db2:	89a3      	ldrh	r3, [r4, #12]
 8000db4:	07db      	lsls	r3, r3, #31
 8000db6:	d507      	bpl.n	8000dc8 <__swbuf_r+0x6e>
 8000db8:	2d0a      	cmp	r5, #10
 8000dba:	d105      	bne.n	8000dc8 <__swbuf_r+0x6e>
 8000dbc:	0021      	movs	r1, r4
 8000dbe:	0030      	movs	r0, r6
 8000dc0:	f7ff ff6a 	bl	8000c98 <_fflush_r>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d107      	bne.n	8000dd8 <__swbuf_r+0x7e>
 8000dc8:	0028      	movs	r0, r5
 8000dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dcc:	0021      	movs	r1, r4
 8000dce:	0030      	movs	r0, r6
 8000dd0:	f000 f806 	bl	8000de0 <__swsetup_r>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d0d3      	beq.n	8000d80 <__swbuf_r+0x26>
 8000dd8:	2501      	movs	r5, #1
 8000dda:	426d      	negs	r5, r5
 8000ddc:	e7f4      	b.n	8000dc8 <__swbuf_r+0x6e>
	...

08000de0 <__swsetup_r>:
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <__swsetup_r+0xc4>)
 8000de2:	b570      	push	{r4, r5, r6, lr}
 8000de4:	0005      	movs	r5, r0
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	000c      	movs	r4, r1
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d004      	beq.n	8000df8 <__swsetup_r+0x18>
 8000dee:	6a03      	ldr	r3, [r0, #32]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <__swsetup_r+0x18>
 8000df4:	f7ff fcba 	bl	800076c <__sinit>
 8000df8:	230c      	movs	r3, #12
 8000dfa:	5ee2      	ldrsh	r2, [r4, r3]
 8000dfc:	b293      	uxth	r3, r2
 8000dfe:	0711      	lsls	r1, r2, #28
 8000e00:	d423      	bmi.n	8000e4a <__swsetup_r+0x6a>
 8000e02:	06d9      	lsls	r1, r3, #27
 8000e04:	d407      	bmi.n	8000e16 <__swsetup_r+0x36>
 8000e06:	2309      	movs	r3, #9
 8000e08:	2001      	movs	r0, #1
 8000e0a:	602b      	str	r3, [r5, #0]
 8000e0c:	3337      	adds	r3, #55	; 0x37
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	81a3      	strh	r3, [r4, #12]
 8000e12:	4240      	negs	r0, r0
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
 8000e16:	075b      	lsls	r3, r3, #29
 8000e18:	d513      	bpl.n	8000e42 <__swsetup_r+0x62>
 8000e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	d008      	beq.n	8000e32 <__swsetup_r+0x52>
 8000e20:	0023      	movs	r3, r4
 8000e22:	3344      	adds	r3, #68	; 0x44
 8000e24:	4299      	cmp	r1, r3
 8000e26:	d002      	beq.n	8000e2e <__swsetup_r+0x4e>
 8000e28:	0028      	movs	r0, r5
 8000e2a:	f7ff fdad 	bl	8000988 <_free_r>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	6363      	str	r3, [r4, #52]	; 0x34
 8000e32:	2224      	movs	r2, #36	; 0x24
 8000e34:	89a3      	ldrh	r3, [r4, #12]
 8000e36:	4393      	bics	r3, r2
 8000e38:	81a3      	strh	r3, [r4, #12]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6063      	str	r3, [r4, #4]
 8000e3e:	6923      	ldr	r3, [r4, #16]
 8000e40:	6023      	str	r3, [r4, #0]
 8000e42:	2308      	movs	r3, #8
 8000e44:	89a2      	ldrh	r2, [r4, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	81a3      	strh	r3, [r4, #12]
 8000e4a:	6923      	ldr	r3, [r4, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10b      	bne.n	8000e68 <__swsetup_r+0x88>
 8000e50:	21a0      	movs	r1, #160	; 0xa0
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	0089      	lsls	r1, r1, #2
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <__swsetup_r+0x88>
 8000e60:	0021      	movs	r1, r4
 8000e62:	0028      	movs	r0, r5
 8000e64:	f000 f85a 	bl	8000f1c <__smakebuf_r>
 8000e68:	220c      	movs	r2, #12
 8000e6a:	5ea3      	ldrsh	r3, [r4, r2]
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	001a      	movs	r2, r3
 8000e70:	b299      	uxth	r1, r3
 8000e72:	4002      	ands	r2, r0
 8000e74:	4203      	tst	r3, r0
 8000e76:	d00f      	beq.n	8000e98 <__swsetup_r+0xb8>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60a2      	str	r2, [r4, #8]
 8000e7c:	6962      	ldr	r2, [r4, #20]
 8000e7e:	4252      	negs	r2, r2
 8000e80:	61a2      	str	r2, [r4, #24]
 8000e82:	2000      	movs	r0, #0
 8000e84:	6922      	ldr	r2, [r4, #16]
 8000e86:	4282      	cmp	r2, r0
 8000e88:	d1c4      	bne.n	8000e14 <__swsetup_r+0x34>
 8000e8a:	0609      	lsls	r1, r1, #24
 8000e8c:	d5c2      	bpl.n	8000e14 <__swsetup_r+0x34>
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	4313      	orrs	r3, r2
 8000e92:	81a3      	strh	r3, [r4, #12]
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7bd      	b.n	8000e14 <__swsetup_r+0x34>
 8000e98:	0788      	lsls	r0, r1, #30
 8000e9a:	d400      	bmi.n	8000e9e <__swsetup_r+0xbe>
 8000e9c:	6962      	ldr	r2, [r4, #20]
 8000e9e:	60a2      	str	r2, [r4, #8]
 8000ea0:	e7ef      	b.n	8000e82 <__swsetup_r+0xa2>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	20000058 	.word	0x20000058

08000ea8 <_sbrk_r>:
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	b570      	push	{r4, r5, r6, lr}
 8000eac:	4d06      	ldr	r5, [pc, #24]	; (8000ec8 <_sbrk_r+0x20>)
 8000eae:	0004      	movs	r4, r0
 8000eb0:	0008      	movs	r0, r1
 8000eb2:	602b      	str	r3, [r5, #0]
 8000eb4:	f7ff fb6a 	bl	800058c <_sbrk>
 8000eb8:	1c43      	adds	r3, r0, #1
 8000eba:	d103      	bne.n	8000ec4 <_sbrk_r+0x1c>
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <_sbrk_r+0x1c>
 8000ec2:	6023      	str	r3, [r4, #0]
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	200001bc 	.word	0x200001bc

08000ecc <__swhatbuf_r>:
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	000e      	movs	r6, r1
 8000ed0:	001d      	movs	r5, r3
 8000ed2:	230e      	movs	r3, #14
 8000ed4:	5ec9      	ldrsh	r1, [r1, r3]
 8000ed6:	0014      	movs	r4, r2
 8000ed8:	b096      	sub	sp, #88	; 0x58
 8000eda:	2900      	cmp	r1, #0
 8000edc:	da0c      	bge.n	8000ef8 <__swhatbuf_r+0x2c>
 8000ede:	89b2      	ldrh	r2, [r6, #12]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	4019      	ands	r1, r3
 8000ee6:	421a      	tst	r2, r3
 8000ee8:	d013      	beq.n	8000f12 <__swhatbuf_r+0x46>
 8000eea:	2100      	movs	r1, #0
 8000eec:	3b40      	subs	r3, #64	; 0x40
 8000eee:	2000      	movs	r0, #0
 8000ef0:	6029      	str	r1, [r5, #0]
 8000ef2:	6023      	str	r3, [r4, #0]
 8000ef4:	b016      	add	sp, #88	; 0x58
 8000ef6:	bd70      	pop	{r4, r5, r6, pc}
 8000ef8:	466a      	mov	r2, sp
 8000efa:	f000 f84d 	bl	8000f98 <_fstat_r>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	dbed      	blt.n	8000ede <__swhatbuf_r+0x12>
 8000f02:	23f0      	movs	r3, #240	; 0xf0
 8000f04:	9901      	ldr	r1, [sp, #4]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	4019      	ands	r1, r3
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <__swhatbuf_r+0x4c>)
 8000f0c:	18c9      	adds	r1, r1, r3
 8000f0e:	424b      	negs	r3, r1
 8000f10:	4159      	adcs	r1, r3
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	e7ea      	b.n	8000eee <__swhatbuf_r+0x22>
 8000f18:	ffffe000 	.word	0xffffe000

08000f1c <__smakebuf_r>:
 8000f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f1e:	2602      	movs	r6, #2
 8000f20:	898b      	ldrh	r3, [r1, #12]
 8000f22:	0005      	movs	r5, r0
 8000f24:	000c      	movs	r4, r1
 8000f26:	4233      	tst	r3, r6
 8000f28:	d006      	beq.n	8000f38 <__smakebuf_r+0x1c>
 8000f2a:	0023      	movs	r3, r4
 8000f2c:	3347      	adds	r3, #71	; 0x47
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	6123      	str	r3, [r4, #16]
 8000f32:	2301      	movs	r3, #1
 8000f34:	6163      	str	r3, [r4, #20]
 8000f36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000f38:	466a      	mov	r2, sp
 8000f3a:	ab01      	add	r3, sp, #4
 8000f3c:	f7ff ffc6 	bl	8000ecc <__swhatbuf_r>
 8000f40:	9900      	ldr	r1, [sp, #0]
 8000f42:	0007      	movs	r7, r0
 8000f44:	0028      	movs	r0, r5
 8000f46:	f7ff fd8b 	bl	8000a60 <_malloc_r>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d108      	bne.n	8000f60 <__smakebuf_r+0x44>
 8000f4e:	220c      	movs	r2, #12
 8000f50:	5ea3      	ldrsh	r3, [r4, r2]
 8000f52:	059a      	lsls	r2, r3, #22
 8000f54:	d4ef      	bmi.n	8000f36 <__smakebuf_r+0x1a>
 8000f56:	2203      	movs	r2, #3
 8000f58:	4393      	bics	r3, r2
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	81a6      	strh	r6, [r4, #12]
 8000f5e:	e7e4      	b.n	8000f2a <__smakebuf_r+0xe>
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	89a2      	ldrh	r2, [r4, #12]
 8000f64:	6020      	str	r0, [r4, #0]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	81a3      	strh	r3, [r4, #12]
 8000f6a:	9b00      	ldr	r3, [sp, #0]
 8000f6c:	6120      	str	r0, [r4, #16]
 8000f6e:	6163      	str	r3, [r4, #20]
 8000f70:	9b01      	ldr	r3, [sp, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00c      	beq.n	8000f90 <__smakebuf_r+0x74>
 8000f76:	0028      	movs	r0, r5
 8000f78:	230e      	movs	r3, #14
 8000f7a:	5ee1      	ldrsh	r1, [r4, r3]
 8000f7c:	f000 f81e 	bl	8000fbc <_isatty_r>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d005      	beq.n	8000f90 <__smakebuf_r+0x74>
 8000f84:	2303      	movs	r3, #3
 8000f86:	89a2      	ldrh	r2, [r4, #12]
 8000f88:	439a      	bics	r2, r3
 8000f8a:	3b02      	subs	r3, #2
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	81a3      	strh	r3, [r4, #12]
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	433b      	orrs	r3, r7
 8000f94:	81a3      	strh	r3, [r4, #12]
 8000f96:	e7ce      	b.n	8000f36 <__smakebuf_r+0x1a>

08000f98 <_fstat_r>:
 8000f98:	2300      	movs	r3, #0
 8000f9a:	b570      	push	{r4, r5, r6, lr}
 8000f9c:	4d06      	ldr	r5, [pc, #24]	; (8000fb8 <_fstat_r+0x20>)
 8000f9e:	0004      	movs	r4, r0
 8000fa0:	0008      	movs	r0, r1
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	602b      	str	r3, [r5, #0]
 8000fa6:	f7ff face 	bl	8000546 <_fstat>
 8000faa:	1c43      	adds	r3, r0, #1
 8000fac:	d103      	bne.n	8000fb6 <_fstat_r+0x1e>
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d000      	beq.n	8000fb6 <_fstat_r+0x1e>
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	200001bc 	.word	0x200001bc

08000fbc <_isatty_r>:
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	b570      	push	{r4, r5, r6, lr}
 8000fc0:	4d06      	ldr	r5, [pc, #24]	; (8000fdc <_isatty_r+0x20>)
 8000fc2:	0004      	movs	r4, r0
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	602b      	str	r3, [r5, #0]
 8000fc8:	f7ff facb 	bl	8000562 <_isatty>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d103      	bne.n	8000fd8 <_isatty_r+0x1c>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d000      	beq.n	8000fd8 <_isatty_r+0x1c>
 8000fd6:	6023      	str	r3, [r4, #0]
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	200001bc 	.word	0x200001bc

08000fe0 <_init>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe6:	bc08      	pop	{r3}
 8000fe8:	469e      	mov	lr, r3
 8000fea:	4770      	bx	lr

08000fec <_fini>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff2:	bc08      	pop	{r3}
 8000ff4:	469e      	mov	lr, r3
 8000ff6:	4770      	bx	lr
