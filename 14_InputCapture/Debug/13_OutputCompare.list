
13_OutputCompare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000fb8  08000fb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc8  08000fc8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc8  08000fc8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc8  08000fc8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800102c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800102c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001048  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000530  00000000  00000000  0002110f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00021640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f1  00000000  00000000  000217a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f10  00000000  00000000  00021891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b1f  00000000  00000000  000237a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00031f27  00000000  00000000  000252c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a4c  00000000  00000000  000571e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00057c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000fa0 	.word	0x08000fa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08000fa0 	.word	0x08000fa0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__io_putchar>:
void uart2_tx_init();

uint32_t sensor_value = 0;

int __io_putchar(int ch)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	0018      	movs	r0, r3
 800022e:	f000 f8cd 	bl	80003cc <uart2_write>
	return ch;
 8000232:	687b      	ldr	r3, [r7, #4]
}
 8000234:	0018      	movs	r0, r3
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <main>:

int main()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= GPIOCEN;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <main+0x64>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <main+0x64>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0309      	lsls	r1, r1, #12
 800024a:	430a      	orrs	r2, r1
 800024c:	615a      	str	r2, [r3, #20]
	GPIOC->MODER |= (1<<18);
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0x68>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <main+0x68>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	02c9      	lsls	r1, r1, #11
 8000258:	430a      	orrs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1<<19);
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <main+0x68>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <main+0x68>)
 8000262:	4911      	ldr	r1, [pc, #68]	; (80002a8 <main+0x6c>)
 8000264:	400a      	ands	r2, r1
 8000266:	601a      	str	r2, [r3, #0]
	timer6_init1Hz();
 8000268:	f000 f964 	bl	8000534 <timer6_init1Hz>
	uart2_tx_init();
 800026c:	f000 f822 	bl	80002b4 <uart2_tx_init>
	while(1)
	{
		while(!(TIM6->SR & UIF));
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <main+0x70>)
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	2201      	movs	r2, #1
 8000278:	4013      	ands	r3, r2
 800027a:	d0fa      	beq.n	8000272 <main+0x36>
		TIM6->SR &= ~UIF;
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <main+0x70>)
 800027e:	691a      	ldr	r2, [r3, #16]
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0x70>)
 8000282:	2101      	movs	r1, #1
 8000284:	438a      	bics	r2, r1
 8000286:	611a      	str	r2, [r3, #16]
		GPIOC->ODR ^= LED_PIN;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <main+0x68>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <main+0x68>)
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	0089      	lsls	r1, r1, #2
 8000292:	404a      	eors	r2, r1
 8000294:	615a      	str	r2, [r3, #20]
		printf("1 sec elapsed\n");
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <main+0x74>)
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fab1 	bl	8000800 <puts>
		while(!(TIM6->SR & UIF));
 800029e:	e7e7      	b.n	8000270 <main+0x34>
 80002a0:	40021000 	.word	0x40021000
 80002a4:	48000800 	.word	0x48000800
 80002a8:	fff7ffff 	.word	0xfff7ffff
 80002ac:	40001000 	.word	0x40001000
 80002b0:	08000fb8 	.word	0x08000fb8

080002b4 <uart2_tx_init>:
	}
}

void uart2_tx_init()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	//enable clock to gpio//
	RCC->AHBENR |= GPIOAEN;
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <uart2_tx_init+0xb0>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	4b29      	ldr	r3, [pc, #164]	; (8000364 <uart2_tx_init+0xb0>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	0289      	lsls	r1, r1, #10
 80002c2:	430a      	orrs	r2, r1
 80002c4:	615a      	str	r2, [r3, #20]
	//alternate fun mode//
	GPIOA->MODER &= ~(1U<<4);
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2110      	movs	r1, #16
 80002d2:	438a      	bics	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5);
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2120      	movs	r1, #32
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
	//pa2 to alternate fun tx, af1
	GPIOA->AFR[0] |= (1<<8);
 80002e6:	2390      	movs	r3, #144	; 0x90
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	6a1a      	ldr	r2, [r3, #32]
 80002ec:	2390      	movs	r3, #144	; 0x90
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	0049      	lsls	r1, r1, #1
 80002f4:	430a      	orrs	r2, r1
 80002f6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<9);
 80002f8:	2390      	movs	r3, #144	; 0x90
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	6a1a      	ldr	r2, [r3, #32]
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	4919      	ldr	r1, [pc, #100]	; (8000368 <uart2_tx_init+0xb4>)
 8000304:	400a      	ands	r2, r1
 8000306:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<10);
 8000308:	2390      	movs	r3, #144	; 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	6a1a      	ldr	r2, [r3, #32]
 800030e:	2390      	movs	r3, #144	; 0x90
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	4916      	ldr	r1, [pc, #88]	; (800036c <uart2_tx_init+0xb8>)
 8000314:	400a      	ands	r2, r1
 8000316:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000318:	2390      	movs	r3, #144	; 0x90
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	6a1a      	ldr	r2, [r3, #32]
 800031e:	2390      	movs	r3, #144	; 0x90
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	4913      	ldr	r1, [pc, #76]	; (8000370 <uart2_tx_init+0xbc>)
 8000324:	400a      	ands	r2, r1
 8000326:	621a      	str	r2, [r3, #32]
	//enable clock to uart2//
	RCC->APB1ENR |= UART2EN;
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <uart2_tx_init+0xb0>)
 800032a:	69da      	ldr	r2, [r3, #28]
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <uart2_tx_init+0xb0>)
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	0289      	lsls	r1, r1, #10
 8000332:	430a      	orrs	r2, r1
 8000334:	61da      	str	r2, [r3, #28]
	//baud rate//
	set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000336:	2396      	movs	r3, #150	; 0x96
 8000338:	019b      	lsls	r3, r3, #6
 800033a:	490e      	ldr	r1, [pc, #56]	; (8000374 <uart2_tx_init+0xc0>)
 800033c:	480e      	ldr	r0, [pc, #56]	; (8000378 <uart2_tx_init+0xc4>)
 800033e:	001a      	movs	r2, r3
 8000340:	f000 f81c 	bl	800037c <set_baudrate>
	//USART2->BRR = 0x1388;
	//program stop bits//
	USART2->CR2 = 0x00;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <uart2_tx_init+0xc4>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
	//configure transmit direction//
	USART2->CR1 = CR1_TE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <uart2_tx_init+0xc4>)
 800034c:	2208      	movs	r2, #8
 800034e:	601a      	str	r2, [r3, #0]
	//enable uart module//
	USART2->CR1 |= UART_EN;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <uart2_tx_init+0xc4>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <uart2_tx_init+0xc4>)
 8000356:	2101      	movs	r1, #1
 8000358:	430a      	orrs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	40021000 	.word	0x40021000
 8000368:	fffffdff 	.word	0xfffffdff
 800036c:	fffffbff 	.word	0xfffffbff
 8000370:	fffff7ff 	.word	0xfffff7ff
 8000374:	02dc6c00 	.word	0x02dc6c00
 8000378:	40004400 	.word	0x40004400

0800037c <set_baudrate>:
static void set_baudrate(USART_TypeDef *USARTTX, uint32_t PeriphClk, uint32_t BaudRate)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
	USARTTX->BRR = compute_uart_div(PeriphClk, BaudRate);//0x340//1a1
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f000 f808 	bl	80003a4 <compute_uart_div>
 8000394:	0003      	movs	r3, r0
 8000396:	001a      	movs	r2, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	60da      	str	r2, [r3, #12]
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b004      	add	sp, #16
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	085a      	lsrs	r2, r3, #1
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	18d3      	adds	r3, r2, r3
 80003b6:	6839      	ldr	r1, [r7, #0]
 80003b8:	0018      	movs	r0, r3
 80003ba:	f7ff fea5 	bl	8000108 <__udivsi3>
 80003be:	0003      	movs	r3, r0
 80003c0:	b29b      	uxth	r3, r3
}
 80003c2:	0018      	movs	r0, r3
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <uart2_write>:

void uart2_write(uint8_t ch)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	0002      	movs	r2, r0
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	701a      	strb	r2, [r3, #0]
	//while(*ch)
	{
	//make sure transmit data reg is empty//
	//write transmit data to reg//
	while(!(USART2->ISR & SR_TXE));
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <uart2_write+0x2c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	2280      	movs	r2, #128	; 0x80
 80003e0:	4013      	ands	r3, r2
 80003e2:	d0fa      	beq.n	80003da <uart2_write+0xe>
	USART2->TDR = (ch&0xff);
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <uart2_write+0x2c>)
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	8513      	strh	r3, [r2, #40]	; 0x28
	//for(int i=0; i<1000; i++);
	//ch++;
	}
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40004400 	.word	0x40004400

080003fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e00a      	b.n	8000424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800040e:	e000      	b.n	8000412 <_read+0x16>
 8000410:	bf00      	nop
 8000412:	0001      	movs	r1, r0
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	60ba      	str	r2, [r7, #8]
 800041a:	b2ca      	uxtb	r2, r1
 800041c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbf0      	blt.n	800040e <_read+0x12>
  }

  return len;
 800042c:	687b      	ldr	r3, [r7, #4]
}
 800042e:	0018      	movs	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	b006      	add	sp, #24
 8000434:	bd80      	pop	{r7, pc}

08000436 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	e009      	b.n	800045c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	60ba      	str	r2, [r7, #8]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff fee5 	bl	8000220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	dbf1      	blt.n	8000448 <_write+0x12>
  }
  return len;
 8000464:	687b      	ldr	r3, [r7, #4]
}
 8000466:	0018      	movs	r0, r3
 8000468:	46bd      	mov	sp, r7
 800046a:	b006      	add	sp, #24
 800046c:	bd80      	pop	{r7, pc}

0800046e <_close>:

int _close(int file)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000476:	2301      	movs	r3, #1
 8000478:	425b      	negs	r3, r3
}
 800047a:	0018      	movs	r0, r3
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	0192      	lsls	r2, r2, #6
 8000492:	605a      	str	r2, [r3, #4]
  return 0;
 8000494:	2300      	movs	r3, #0
}
 8000496:	0018      	movs	r0, r3
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}

0800049e <_isatty>:

int _isatty(int file)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	0018      	movs	r0, r3
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b004      	add	sp, #16
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	18d3      	adds	r3, r2, r3
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f000 fad4 	bl	8000aa4 <__errno>
 80004fc:	0003      	movs	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	18d2      	adds	r2, r2, r3
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <_sbrk+0x64>)
 8000518:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b006      	add	sp, #24
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20002000 	.word	0x20002000
 8000528:	00000400 	.word	0x00000400
 800052c:	20000078 	.word	0x20000078
 8000530:	200001c8 	.word	0x200001c8

08000534 <timer6_init1Hz>:
#define CC1E				(1U<<0)
#define RCC_GPIOBEN			(1U<<18)


void timer6_init1Hz()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	/*enable clock access to timer6*/
	RCC->APB1ENR |= TIMER6_EN;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <timer6_init1Hz+0x34>)
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <timer6_init1Hz+0x34>)
 800053e:	2110      	movs	r1, #16
 8000540:	430a      	orrs	r2, r1
 8000542:	61da      	str	r2, [r3, #28]
	/*set prescalar value*/
	TIM6->PSC = 4800 -1;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <timer6_init1Hz+0x38>)
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <timer6_init1Hz+0x3c>)
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
	/*set auto reload value*/
	TIM6->ARR = 10000 -1;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <timer6_init1Hz+0x38>)
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <timer6_init1Hz+0x40>)
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
	/*enable timer*/
	TIM6->CNT = 0;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <timer6_init1Hz+0x38>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= CR1_CEN;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <timer6_init1Hz+0x38>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b04      	ldr	r3, [pc, #16]	; (800056c <timer6_init1Hz+0x38>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	40001000 	.word	0x40001000
 8000570:	000012bf 	.word	0x000012bf
 8000574:	0000270f 	.word	0x0000270f

08000578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800057c:	e000      	b.n	8000580 <Reset_Handler+0x8>
 800057e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LoopForever+0xe>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <LoopForever+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a6:	f000 fa83 	bl	8000ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fe47 	bl	800023c <main>

080005ae <LoopForever>:

LoopForever:
  b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   r0, =_estack
 80005b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005bc:	08000fd0 	.word	0x08000fd0
  ldr r2, =_sbss
 80005c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005c4:	200001c8 	.word	0x200001c8

080005c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_IRQHandler>
	...

080005cc <std>:
 80005cc:	2300      	movs	r3, #0
 80005ce:	b510      	push	{r4, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	6003      	str	r3, [r0, #0]
 80005d4:	6043      	str	r3, [r0, #4]
 80005d6:	6083      	str	r3, [r0, #8]
 80005d8:	8181      	strh	r1, [r0, #12]
 80005da:	6643      	str	r3, [r0, #100]	; 0x64
 80005dc:	81c2      	strh	r2, [r0, #14]
 80005de:	6103      	str	r3, [r0, #16]
 80005e0:	6143      	str	r3, [r0, #20]
 80005e2:	6183      	str	r3, [r0, #24]
 80005e4:	0019      	movs	r1, r3
 80005e6:	2208      	movs	r2, #8
 80005e8:	305c      	adds	r0, #92	; 0x5c
 80005ea:	f000 fa05 	bl	80009f8 <memset>
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <std+0x50>)
 80005f0:	6224      	str	r4, [r4, #32]
 80005f2:	6263      	str	r3, [r4, #36]	; 0x24
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <std+0x54>)
 80005f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <std+0x58>)
 80005fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <std+0x5c>)
 80005fe:	6323      	str	r3, [r4, #48]	; 0x30
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <std+0x60>)
 8000602:	429c      	cmp	r4, r3
 8000604:	d005      	beq.n	8000612 <std+0x46>
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <std+0x64>)
 8000608:	429c      	cmp	r4, r3
 800060a:	d002      	beq.n	8000612 <std+0x46>
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <std+0x68>)
 800060e:	429c      	cmp	r4, r3
 8000610:	d103      	bne.n	800061a <std+0x4e>
 8000612:	0020      	movs	r0, r4
 8000614:	3058      	adds	r0, #88	; 0x58
 8000616:	f000 fa6f 	bl	8000af8 <__retarget_lock_init_recursive>
 800061a:	bd10      	pop	{r4, pc}
 800061c:	08000815 	.word	0x08000815
 8000620:	0800083d 	.word	0x0800083d
 8000624:	08000875 	.word	0x08000875
 8000628:	080008a1 	.word	0x080008a1
 800062c:	2000007c 	.word	0x2000007c
 8000630:	200000e4 	.word	0x200000e4
 8000634:	2000014c 	.word	0x2000014c

08000638 <stdio_exit_handler>:
 8000638:	b510      	push	{r4, lr}
 800063a:	4a03      	ldr	r2, [pc, #12]	; (8000648 <stdio_exit_handler+0x10>)
 800063c:	4903      	ldr	r1, [pc, #12]	; (800064c <stdio_exit_handler+0x14>)
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <stdio_exit_handler+0x18>)
 8000640:	f000 f86c 	bl	800071c <_fwalk_sglue>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000000 	.word	0x20000000
 800064c:	08000e11 	.word	0x08000e11
 8000650:	2000000c 	.word	0x2000000c

08000654 <cleanup_stdio>:
 8000654:	6841      	ldr	r1, [r0, #4]
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <cleanup_stdio+0x30>)
 8000658:	b510      	push	{r4, lr}
 800065a:	0004      	movs	r4, r0
 800065c:	4299      	cmp	r1, r3
 800065e:	d001      	beq.n	8000664 <cleanup_stdio+0x10>
 8000660:	f000 fbd6 	bl	8000e10 <_fflush_r>
 8000664:	68a1      	ldr	r1, [r4, #8]
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <cleanup_stdio+0x34>)
 8000668:	4299      	cmp	r1, r3
 800066a:	d002      	beq.n	8000672 <cleanup_stdio+0x1e>
 800066c:	0020      	movs	r0, r4
 800066e:	f000 fbcf 	bl	8000e10 <_fflush_r>
 8000672:	68e1      	ldr	r1, [r4, #12]
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <cleanup_stdio+0x38>)
 8000676:	4299      	cmp	r1, r3
 8000678:	d002      	beq.n	8000680 <cleanup_stdio+0x2c>
 800067a:	0020      	movs	r0, r4
 800067c:	f000 fbc8 	bl	8000e10 <_fflush_r>
 8000680:	bd10      	pop	{r4, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	2000007c 	.word	0x2000007c
 8000688:	200000e4 	.word	0x200000e4
 800068c:	2000014c 	.word	0x2000014c

08000690 <global_stdio_init.part.0>:
 8000690:	b510      	push	{r4, lr}
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <global_stdio_init.part.0+0x28>)
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <global_stdio_init.part.0+0x2c>)
 8000696:	2104      	movs	r1, #4
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <global_stdio_init.part.0+0x30>)
 800069c:	2200      	movs	r2, #0
 800069e:	f7ff ff95 	bl	80005cc <std>
 80006a2:	2201      	movs	r2, #1
 80006a4:	2109      	movs	r1, #9
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <global_stdio_init.part.0+0x34>)
 80006a8:	f7ff ff90 	bl	80005cc <std>
 80006ac:	2202      	movs	r2, #2
 80006ae:	2112      	movs	r1, #18
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <global_stdio_init.part.0+0x38>)
 80006b2:	f7ff ff8b 	bl	80005cc <std>
 80006b6:	bd10      	pop	{r4, pc}
 80006b8:	200001b4 	.word	0x200001b4
 80006bc:	08000639 	.word	0x08000639
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	200000e4 	.word	0x200000e4
 80006c8:	2000014c 	.word	0x2000014c

080006cc <__sfp_lock_acquire>:
 80006cc:	b510      	push	{r4, lr}
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <__sfp_lock_acquire+0xc>)
 80006d0:	f000 fa13 	bl	8000afa <__retarget_lock_acquire_recursive>
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	200001bd 	.word	0x200001bd

080006dc <__sfp_lock_release>:
 80006dc:	b510      	push	{r4, lr}
 80006de:	4802      	ldr	r0, [pc, #8]	; (80006e8 <__sfp_lock_release+0xc>)
 80006e0:	f000 fa0c 	bl	8000afc <__retarget_lock_release_recursive>
 80006e4:	bd10      	pop	{r4, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200001bd 	.word	0x200001bd

080006ec <__sinit>:
 80006ec:	b510      	push	{r4, lr}
 80006ee:	0004      	movs	r4, r0
 80006f0:	f7ff ffec 	bl	80006cc <__sfp_lock_acquire>
 80006f4:	6a23      	ldr	r3, [r4, #32]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <__sinit+0x14>
 80006fa:	f7ff ffef 	bl	80006dc <__sfp_lock_release>
 80006fe:	bd10      	pop	{r4, pc}
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__sinit+0x28>)
 8000702:	6223      	str	r3, [r4, #32]
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__sinit+0x2c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f6      	bne.n	80006fa <__sinit+0xe>
 800070c:	f7ff ffc0 	bl	8000690 <global_stdio_init.part.0>
 8000710:	e7f3      	b.n	80006fa <__sinit+0xe>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	08000655 	.word	0x08000655
 8000718:	200001b4 	.word	0x200001b4

0800071c <_fwalk_sglue>:
 800071c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800071e:	0014      	movs	r4, r2
 8000720:	2600      	movs	r6, #0
 8000722:	9000      	str	r0, [sp, #0]
 8000724:	9101      	str	r1, [sp, #4]
 8000726:	68a5      	ldr	r5, [r4, #8]
 8000728:	6867      	ldr	r7, [r4, #4]
 800072a:	3f01      	subs	r7, #1
 800072c:	d504      	bpl.n	8000738 <_fwalk_sglue+0x1c>
 800072e:	6824      	ldr	r4, [r4, #0]
 8000730:	2c00      	cmp	r4, #0
 8000732:	d1f8      	bne.n	8000726 <_fwalk_sglue+0xa>
 8000734:	0030      	movs	r0, r6
 8000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000738:	89ab      	ldrh	r3, [r5, #12]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d908      	bls.n	8000750 <_fwalk_sglue+0x34>
 800073e:	220e      	movs	r2, #14
 8000740:	5eab      	ldrsh	r3, [r5, r2]
 8000742:	3301      	adds	r3, #1
 8000744:	d004      	beq.n	8000750 <_fwalk_sglue+0x34>
 8000746:	0029      	movs	r1, r5
 8000748:	9800      	ldr	r0, [sp, #0]
 800074a:	9b01      	ldr	r3, [sp, #4]
 800074c:	4798      	blx	r3
 800074e:	4306      	orrs	r6, r0
 8000750:	3568      	adds	r5, #104	; 0x68
 8000752:	e7ea      	b.n	800072a <_fwalk_sglue+0xe>

08000754 <_puts_r>:
 8000754:	6a03      	ldr	r3, [r0, #32]
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	0005      	movs	r5, r0
 800075a:	000e      	movs	r6, r1
 800075c:	6884      	ldr	r4, [r0, #8]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <_puts_r+0x12>
 8000762:	f7ff ffc3 	bl	80006ec <__sinit>
 8000766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000768:	07db      	lsls	r3, r3, #31
 800076a:	d405      	bmi.n	8000778 <_puts_r+0x24>
 800076c:	89a3      	ldrh	r3, [r4, #12]
 800076e:	059b      	lsls	r3, r3, #22
 8000770:	d402      	bmi.n	8000778 <_puts_r+0x24>
 8000772:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000774:	f000 f9c1 	bl	8000afa <__retarget_lock_acquire_recursive>
 8000778:	89a3      	ldrh	r3, [r4, #12]
 800077a:	071b      	lsls	r3, r3, #28
 800077c:	d502      	bpl.n	8000784 <_puts_r+0x30>
 800077e:	6923      	ldr	r3, [r4, #16]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d11f      	bne.n	80007c4 <_puts_r+0x70>
 8000784:	0021      	movs	r1, r4
 8000786:	0028      	movs	r0, r5
 8000788:	f000 f8d2 	bl	8000930 <__swsetup_r>
 800078c:	2800      	cmp	r0, #0
 800078e:	d019      	beq.n	80007c4 <_puts_r+0x70>
 8000790:	2501      	movs	r5, #1
 8000792:	426d      	negs	r5, r5
 8000794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000796:	07db      	lsls	r3, r3, #31
 8000798:	d405      	bmi.n	80007a6 <_puts_r+0x52>
 800079a:	89a3      	ldrh	r3, [r4, #12]
 800079c:	059b      	lsls	r3, r3, #22
 800079e:	d402      	bmi.n	80007a6 <_puts_r+0x52>
 80007a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007a2:	f000 f9ab 	bl	8000afc <__retarget_lock_release_recursive>
 80007a6:	0028      	movs	r0, r5
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	3601      	adds	r6, #1
 80007ac:	60a3      	str	r3, [r4, #8]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da04      	bge.n	80007bc <_puts_r+0x68>
 80007b2:	69a2      	ldr	r2, [r4, #24]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dc16      	bgt.n	80007e6 <_puts_r+0x92>
 80007b8:	290a      	cmp	r1, #10
 80007ba:	d014      	beq.n	80007e6 <_puts_r+0x92>
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	6022      	str	r2, [r4, #0]
 80007c2:	7019      	strb	r1, [r3, #0]
 80007c4:	68a3      	ldr	r3, [r4, #8]
 80007c6:	7831      	ldrb	r1, [r6, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d1ed      	bne.n	80007aa <_puts_r+0x56>
 80007ce:	60a3      	str	r3, [r4, #8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da0f      	bge.n	80007f4 <_puts_r+0xa0>
 80007d4:	0028      	movs	r0, r5
 80007d6:	0022      	movs	r2, r4
 80007d8:	310a      	adds	r1, #10
 80007da:	f000 f867 	bl	80008ac <__swbuf_r>
 80007de:	250a      	movs	r5, #10
 80007e0:	3001      	adds	r0, #1
 80007e2:	d1d7      	bne.n	8000794 <_puts_r+0x40>
 80007e4:	e7d4      	b.n	8000790 <_puts_r+0x3c>
 80007e6:	0022      	movs	r2, r4
 80007e8:	0028      	movs	r0, r5
 80007ea:	f000 f85f 	bl	80008ac <__swbuf_r>
 80007ee:	3001      	adds	r0, #1
 80007f0:	d1e8      	bne.n	80007c4 <_puts_r+0x70>
 80007f2:	e7cd      	b.n	8000790 <_puts_r+0x3c>
 80007f4:	250a      	movs	r5, #10
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	6022      	str	r2, [r4, #0]
 80007fc:	701d      	strb	r5, [r3, #0]
 80007fe:	e7c9      	b.n	8000794 <_puts_r+0x40>

08000800 <puts>:
 8000800:	b510      	push	{r4, lr}
 8000802:	4b03      	ldr	r3, [pc, #12]	; (8000810 <puts+0x10>)
 8000804:	0001      	movs	r1, r0
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f7ff ffa4 	bl	8000754 <_puts_r>
 800080c:	bd10      	pop	{r4, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000058 	.word	0x20000058

08000814 <__sread>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	000c      	movs	r4, r1
 8000818:	250e      	movs	r5, #14
 800081a:	5f49      	ldrsh	r1, [r1, r5]
 800081c:	f000 f91a 	bl	8000a54 <_read_r>
 8000820:	2800      	cmp	r0, #0
 8000822:	db03      	blt.n	800082c <__sread+0x18>
 8000824:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000826:	181b      	adds	r3, r3, r0
 8000828:	6563      	str	r3, [r4, #84]	; 0x54
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	89a3      	ldrh	r3, [r4, #12]
 800082e:	4a02      	ldr	r2, [pc, #8]	; (8000838 <__sread+0x24>)
 8000830:	4013      	ands	r3, r2
 8000832:	81a3      	strh	r3, [r4, #12]
 8000834:	e7f9      	b.n	800082a <__sread+0x16>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	ffffefff 	.word	0xffffefff

0800083c <__swrite>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	001f      	movs	r7, r3
 8000840:	898b      	ldrh	r3, [r1, #12]
 8000842:	0005      	movs	r5, r0
 8000844:	000c      	movs	r4, r1
 8000846:	0016      	movs	r6, r2
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	d505      	bpl.n	8000858 <__swrite+0x1c>
 800084c:	230e      	movs	r3, #14
 800084e:	5ec9      	ldrsh	r1, [r1, r3]
 8000850:	2200      	movs	r2, #0
 8000852:	2302      	movs	r3, #2
 8000854:	f000 f8ea 	bl	8000a2c <_lseek_r>
 8000858:	89a3      	ldrh	r3, [r4, #12]
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <__swrite+0x34>)
 800085c:	0028      	movs	r0, r5
 800085e:	4013      	ands	r3, r2
 8000860:	81a3      	strh	r3, [r4, #12]
 8000862:	0032      	movs	r2, r6
 8000864:	230e      	movs	r3, #14
 8000866:	5ee1      	ldrsh	r1, [r4, r3]
 8000868:	003b      	movs	r3, r7
 800086a:	f000 f907 	bl	8000a7c <_write_r>
 800086e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000870:	ffffefff 	.word	0xffffefff

08000874 <__sseek>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	000c      	movs	r4, r1
 8000878:	250e      	movs	r5, #14
 800087a:	5f49      	ldrsh	r1, [r1, r5]
 800087c:	f000 f8d6 	bl	8000a2c <_lseek_r>
 8000880:	89a3      	ldrh	r3, [r4, #12]
 8000882:	1c42      	adds	r2, r0, #1
 8000884:	d103      	bne.n	800088e <__sseek+0x1a>
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <__sseek+0x28>)
 8000888:	4013      	ands	r3, r2
 800088a:	81a3      	strh	r3, [r4, #12]
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0152      	lsls	r2, r2, #5
 8000892:	4313      	orrs	r3, r2
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	6560      	str	r0, [r4, #84]	; 0x54
 8000898:	e7f8      	b.n	800088c <__sseek+0x18>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	ffffefff 	.word	0xffffefff

080008a0 <__sclose>:
 80008a0:	b510      	push	{r4, lr}
 80008a2:	230e      	movs	r3, #14
 80008a4:	5ec9      	ldrsh	r1, [r1, r3]
 80008a6:	f000 f8af 	bl	8000a08 <_close_r>
 80008aa:	bd10      	pop	{r4, pc}

080008ac <__swbuf_r>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	0006      	movs	r6, r0
 80008b0:	000d      	movs	r5, r1
 80008b2:	0014      	movs	r4, r2
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d004      	beq.n	80008c2 <__swbuf_r+0x16>
 80008b8:	6a03      	ldr	r3, [r0, #32]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <__swbuf_r+0x16>
 80008be:	f7ff ff15 	bl	80006ec <__sinit>
 80008c2:	69a3      	ldr	r3, [r4, #24]
 80008c4:	60a3      	str	r3, [r4, #8]
 80008c6:	89a3      	ldrh	r3, [r4, #12]
 80008c8:	071b      	lsls	r3, r3, #28
 80008ca:	d528      	bpl.n	800091e <__swbuf_r+0x72>
 80008cc:	6923      	ldr	r3, [r4, #16]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d025      	beq.n	800091e <__swbuf_r+0x72>
 80008d2:	6923      	ldr	r3, [r4, #16]
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	b2ef      	uxtb	r7, r5
 80008d8:	1ac0      	subs	r0, r0, r3
 80008da:	6963      	ldr	r3, [r4, #20]
 80008dc:	b2ed      	uxtb	r5, r5
 80008de:	4283      	cmp	r3, r0
 80008e0:	dc05      	bgt.n	80008ee <__swbuf_r+0x42>
 80008e2:	0021      	movs	r1, r4
 80008e4:	0030      	movs	r0, r6
 80008e6:	f000 fa93 	bl	8000e10 <_fflush_r>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d11d      	bne.n	800092a <__swbuf_r+0x7e>
 80008ee:	68a3      	ldr	r3, [r4, #8]
 80008f0:	3001      	adds	r0, #1
 80008f2:	3b01      	subs	r3, #1
 80008f4:	60a3      	str	r3, [r4, #8]
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	6022      	str	r2, [r4, #0]
 80008fc:	701f      	strb	r7, [r3, #0]
 80008fe:	6963      	ldr	r3, [r4, #20]
 8000900:	4283      	cmp	r3, r0
 8000902:	d004      	beq.n	800090e <__swbuf_r+0x62>
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	07db      	lsls	r3, r3, #31
 8000908:	d507      	bpl.n	800091a <__swbuf_r+0x6e>
 800090a:	2d0a      	cmp	r5, #10
 800090c:	d105      	bne.n	800091a <__swbuf_r+0x6e>
 800090e:	0021      	movs	r1, r4
 8000910:	0030      	movs	r0, r6
 8000912:	f000 fa7d 	bl	8000e10 <_fflush_r>
 8000916:	2800      	cmp	r0, #0
 8000918:	d107      	bne.n	800092a <__swbuf_r+0x7e>
 800091a:	0028      	movs	r0, r5
 800091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091e:	0021      	movs	r1, r4
 8000920:	0030      	movs	r0, r6
 8000922:	f000 f805 	bl	8000930 <__swsetup_r>
 8000926:	2800      	cmp	r0, #0
 8000928:	d0d3      	beq.n	80008d2 <__swbuf_r+0x26>
 800092a:	2501      	movs	r5, #1
 800092c:	426d      	negs	r5, r5
 800092e:	e7f4      	b.n	800091a <__swbuf_r+0x6e>

08000930 <__swsetup_r>:
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <__swsetup_r+0xc4>)
 8000932:	b570      	push	{r4, r5, r6, lr}
 8000934:	0005      	movs	r5, r0
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	000c      	movs	r4, r1
 800093a:	2800      	cmp	r0, #0
 800093c:	d004      	beq.n	8000948 <__swsetup_r+0x18>
 800093e:	6a03      	ldr	r3, [r0, #32]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <__swsetup_r+0x18>
 8000944:	f7ff fed2 	bl	80006ec <__sinit>
 8000948:	230c      	movs	r3, #12
 800094a:	5ee2      	ldrsh	r2, [r4, r3]
 800094c:	b293      	uxth	r3, r2
 800094e:	0711      	lsls	r1, r2, #28
 8000950:	d423      	bmi.n	800099a <__swsetup_r+0x6a>
 8000952:	06d9      	lsls	r1, r3, #27
 8000954:	d407      	bmi.n	8000966 <__swsetup_r+0x36>
 8000956:	2309      	movs	r3, #9
 8000958:	2001      	movs	r0, #1
 800095a:	602b      	str	r3, [r5, #0]
 800095c:	3337      	adds	r3, #55	; 0x37
 800095e:	4313      	orrs	r3, r2
 8000960:	81a3      	strh	r3, [r4, #12]
 8000962:	4240      	negs	r0, r0
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	075b      	lsls	r3, r3, #29
 8000968:	d513      	bpl.n	8000992 <__swsetup_r+0x62>
 800096a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800096c:	2900      	cmp	r1, #0
 800096e:	d008      	beq.n	8000982 <__swsetup_r+0x52>
 8000970:	0023      	movs	r3, r4
 8000972:	3344      	adds	r3, #68	; 0x44
 8000974:	4299      	cmp	r1, r3
 8000976:	d002      	beq.n	800097e <__swsetup_r+0x4e>
 8000978:	0028      	movs	r0, r5
 800097a:	f000 f8c1 	bl	8000b00 <_free_r>
 800097e:	2300      	movs	r3, #0
 8000980:	6363      	str	r3, [r4, #52]	; 0x34
 8000982:	2224      	movs	r2, #36	; 0x24
 8000984:	89a3      	ldrh	r3, [r4, #12]
 8000986:	4393      	bics	r3, r2
 8000988:	81a3      	strh	r3, [r4, #12]
 800098a:	2300      	movs	r3, #0
 800098c:	6063      	str	r3, [r4, #4]
 800098e:	6923      	ldr	r3, [r4, #16]
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	2308      	movs	r3, #8
 8000994:	89a2      	ldrh	r2, [r4, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	81a3      	strh	r3, [r4, #12]
 800099a:	6923      	ldr	r3, [r4, #16]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10b      	bne.n	80009b8 <__swsetup_r+0x88>
 80009a0:	21a0      	movs	r1, #160	; 0xa0
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	89a3      	ldrh	r3, [r4, #12]
 80009a6:	0089      	lsls	r1, r1, #2
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	400b      	ands	r3, r1
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d003      	beq.n	80009b8 <__swsetup_r+0x88>
 80009b0:	0021      	movs	r1, r4
 80009b2:	0028      	movs	r0, r5
 80009b4:	f000 fa80 	bl	8000eb8 <__smakebuf_r>
 80009b8:	220c      	movs	r2, #12
 80009ba:	5ea3      	ldrsh	r3, [r4, r2]
 80009bc:	2001      	movs	r0, #1
 80009be:	001a      	movs	r2, r3
 80009c0:	b299      	uxth	r1, r3
 80009c2:	4002      	ands	r2, r0
 80009c4:	4203      	tst	r3, r0
 80009c6:	d00f      	beq.n	80009e8 <__swsetup_r+0xb8>
 80009c8:	2200      	movs	r2, #0
 80009ca:	60a2      	str	r2, [r4, #8]
 80009cc:	6962      	ldr	r2, [r4, #20]
 80009ce:	4252      	negs	r2, r2
 80009d0:	61a2      	str	r2, [r4, #24]
 80009d2:	2000      	movs	r0, #0
 80009d4:	6922      	ldr	r2, [r4, #16]
 80009d6:	4282      	cmp	r2, r0
 80009d8:	d1c4      	bne.n	8000964 <__swsetup_r+0x34>
 80009da:	0609      	lsls	r1, r1, #24
 80009dc:	d5c2      	bpl.n	8000964 <__swsetup_r+0x34>
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	4313      	orrs	r3, r2
 80009e2:	81a3      	strh	r3, [r4, #12]
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7bd      	b.n	8000964 <__swsetup_r+0x34>
 80009e8:	0788      	lsls	r0, r1, #30
 80009ea:	d400      	bmi.n	80009ee <__swsetup_r+0xbe>
 80009ec:	6962      	ldr	r2, [r4, #20]
 80009ee:	60a2      	str	r2, [r4, #8]
 80009f0:	e7ef      	b.n	80009d2 <__swsetup_r+0xa2>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000058 	.word	0x20000058

080009f8 <memset>:
 80009f8:	0003      	movs	r3, r0
 80009fa:	1882      	adds	r2, r0, r2
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d100      	bne.n	8000a02 <memset+0xa>
 8000a00:	4770      	bx	lr
 8000a02:	7019      	strb	r1, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	e7f9      	b.n	80009fc <memset+0x4>

08000a08 <_close_r>:
 8000a08:	2300      	movs	r3, #0
 8000a0a:	b570      	push	{r4, r5, r6, lr}
 8000a0c:	4d06      	ldr	r5, [pc, #24]	; (8000a28 <_close_r+0x20>)
 8000a0e:	0004      	movs	r4, r0
 8000a10:	0008      	movs	r0, r1
 8000a12:	602b      	str	r3, [r5, #0]
 8000a14:	f7ff fd2b 	bl	800046e <_close>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d103      	bne.n	8000a24 <_close_r+0x1c>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <_close_r+0x1c>
 8000a22:	6023      	str	r3, [r4, #0]
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200001b8 	.word	0x200001b8

08000a2c <_lseek_r>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	0004      	movs	r4, r0
 8000a30:	0008      	movs	r0, r1
 8000a32:	0011      	movs	r1, r2
 8000a34:	001a      	movs	r2, r3
 8000a36:	2300      	movs	r3, #0
 8000a38:	4d05      	ldr	r5, [pc, #20]	; (8000a50 <_lseek_r+0x24>)
 8000a3a:	602b      	str	r3, [r5, #0]
 8000a3c:	f7ff fd38 	bl	80004b0 <_lseek>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d103      	bne.n	8000a4c <_lseek_r+0x20>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d000      	beq.n	8000a4c <_lseek_r+0x20>
 8000a4a:	6023      	str	r3, [r4, #0]
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	200001b8 	.word	0x200001b8

08000a54 <_read_r>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	0004      	movs	r4, r0
 8000a58:	0008      	movs	r0, r1
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	4d05      	ldr	r5, [pc, #20]	; (8000a78 <_read_r+0x24>)
 8000a62:	602b      	str	r3, [r5, #0]
 8000a64:	f7ff fcca 	bl	80003fc <_read>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d103      	bne.n	8000a74 <_read_r+0x20>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d000      	beq.n	8000a74 <_read_r+0x20>
 8000a72:	6023      	str	r3, [r4, #0]
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <_write_r>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	0004      	movs	r4, r0
 8000a80:	0008      	movs	r0, r1
 8000a82:	0011      	movs	r1, r2
 8000a84:	001a      	movs	r2, r3
 8000a86:	2300      	movs	r3, #0
 8000a88:	4d05      	ldr	r5, [pc, #20]	; (8000aa0 <_write_r+0x24>)
 8000a8a:	602b      	str	r3, [r5, #0]
 8000a8c:	f7ff fcd3 	bl	8000436 <_write>
 8000a90:	1c43      	adds	r3, r0, #1
 8000a92:	d103      	bne.n	8000a9c <_write_r+0x20>
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d000      	beq.n	8000a9c <_write_r+0x20>
 8000a9a:	6023      	str	r3, [r4, #0]
 8000a9c:	bd70      	pop	{r4, r5, r6, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	200001b8 	.word	0x200001b8

08000aa4 <__errno>:
 8000aa4:	4b01      	ldr	r3, [pc, #4]	; (8000aac <__errno+0x8>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	4770      	bx	lr
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000058 	.word	0x20000058

08000ab0 <__libc_init_array>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	4c0c      	ldr	r4, [pc, #48]	; (8000ae8 <__libc_init_array+0x38>)
 8000ab6:	4d0d      	ldr	r5, [pc, #52]	; (8000aec <__libc_init_array+0x3c>)
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	10a4      	asrs	r4, r4, #2
 8000abc:	42a6      	cmp	r6, r4
 8000abe:	d109      	bne.n	8000ad4 <__libc_init_array+0x24>
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	f000 fa6d 	bl	8000fa0 <_init>
 8000ac6:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <__libc_init_array+0x40>)
 8000ac8:	4d0a      	ldr	r5, [pc, #40]	; (8000af4 <__libc_init_array+0x44>)
 8000aca:	1b64      	subs	r4, r4, r5
 8000acc:	10a4      	asrs	r4, r4, #2
 8000ace:	42a6      	cmp	r6, r4
 8000ad0:	d105      	bne.n	8000ade <__libc_init_array+0x2e>
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	00b3      	lsls	r3, r6, #2
 8000ad6:	58eb      	ldr	r3, [r5, r3]
 8000ad8:	4798      	blx	r3
 8000ada:	3601      	adds	r6, #1
 8000adc:	e7ee      	b.n	8000abc <__libc_init_array+0xc>
 8000ade:	00b3      	lsls	r3, r6, #2
 8000ae0:	58eb      	ldr	r3, [r5, r3]
 8000ae2:	4798      	blx	r3
 8000ae4:	3601      	adds	r6, #1
 8000ae6:	e7f2      	b.n	8000ace <__libc_init_array+0x1e>
 8000ae8:	08000fc8 	.word	0x08000fc8
 8000aec:	08000fc8 	.word	0x08000fc8
 8000af0:	08000fcc 	.word	0x08000fcc
 8000af4:	08000fc8 	.word	0x08000fc8

08000af8 <__retarget_lock_init_recursive>:
 8000af8:	4770      	bx	lr

08000afa <__retarget_lock_acquire_recursive>:
 8000afa:	4770      	bx	lr

08000afc <__retarget_lock_release_recursive>:
 8000afc:	4770      	bx	lr
	...

08000b00 <_free_r>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	0005      	movs	r5, r0
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d010      	beq.n	8000b2a <_free_r+0x2a>
 8000b08:	1f0c      	subs	r4, r1, #4
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da00      	bge.n	8000b12 <_free_r+0x12>
 8000b10:	18e4      	adds	r4, r4, r3
 8000b12:	0028      	movs	r0, r5
 8000b14:	f000 f8e2 	bl	8000cdc <__malloc_lock>
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <_free_r+0x90>)
 8000b1a:	6813      	ldr	r3, [r2, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d105      	bne.n	8000b2c <_free_r+0x2c>
 8000b20:	6063      	str	r3, [r4, #4]
 8000b22:	6014      	str	r4, [r2, #0]
 8000b24:	0028      	movs	r0, r5
 8000b26:	f000 f8e1 	bl	8000cec <__malloc_unlock>
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <_free_r+0x42>
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	1821      	adds	r1, r4, r0
 8000b34:	428b      	cmp	r3, r1
 8000b36:	d1f3      	bne.n	8000b20 <_free_r+0x20>
 8000b38:	6819      	ldr	r1, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	1809      	adds	r1, r1, r0
 8000b3e:	6021      	str	r1, [r4, #0]
 8000b40:	e7ee      	b.n	8000b20 <_free_r+0x20>
 8000b42:	001a      	movs	r2, r3
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <_free_r+0x4e>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d9f9      	bls.n	8000b42 <_free_r+0x42>
 8000b4e:	6811      	ldr	r1, [r2, #0]
 8000b50:	1850      	adds	r0, r2, r1
 8000b52:	42a0      	cmp	r0, r4
 8000b54:	d10b      	bne.n	8000b6e <_free_r+0x6e>
 8000b56:	6820      	ldr	r0, [r4, #0]
 8000b58:	1809      	adds	r1, r1, r0
 8000b5a:	1850      	adds	r0, r2, r1
 8000b5c:	6011      	str	r1, [r2, #0]
 8000b5e:	4283      	cmp	r3, r0
 8000b60:	d1e0      	bne.n	8000b24 <_free_r+0x24>
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	1841      	adds	r1, r0, r1
 8000b68:	6011      	str	r1, [r2, #0]
 8000b6a:	6053      	str	r3, [r2, #4]
 8000b6c:	e7da      	b.n	8000b24 <_free_r+0x24>
 8000b6e:	42a0      	cmp	r0, r4
 8000b70:	d902      	bls.n	8000b78 <_free_r+0x78>
 8000b72:	230c      	movs	r3, #12
 8000b74:	602b      	str	r3, [r5, #0]
 8000b76:	e7d5      	b.n	8000b24 <_free_r+0x24>
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	1821      	adds	r1, r4, r0
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d103      	bne.n	8000b88 <_free_r+0x88>
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	1809      	adds	r1, r1, r0
 8000b86:	6021      	str	r1, [r4, #0]
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	6054      	str	r4, [r2, #4]
 8000b8c:	e7ca      	b.n	8000b24 <_free_r+0x24>
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	200001c0 	.word	0x200001c0

08000b94 <sbrk_aligned>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	4e0f      	ldr	r6, [pc, #60]	; (8000bd4 <sbrk_aligned+0x40>)
 8000b98:	000d      	movs	r5, r1
 8000b9a:	6831      	ldr	r1, [r6, #0]
 8000b9c:	0004      	movs	r4, r0
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d102      	bne.n	8000ba8 <sbrk_aligned+0x14>
 8000ba2:	f000 f9eb 	bl	8000f7c <_sbrk_r>
 8000ba6:	6030      	str	r0, [r6, #0]
 8000ba8:	0029      	movs	r1, r5
 8000baa:	0020      	movs	r0, r4
 8000bac:	f000 f9e6 	bl	8000f7c <_sbrk_r>
 8000bb0:	1c43      	adds	r3, r0, #1
 8000bb2:	d00a      	beq.n	8000bca <sbrk_aligned+0x36>
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	1cc5      	adds	r5, r0, #3
 8000bb8:	439d      	bics	r5, r3
 8000bba:	42a8      	cmp	r0, r5
 8000bbc:	d007      	beq.n	8000bce <sbrk_aligned+0x3a>
 8000bbe:	1a29      	subs	r1, r5, r0
 8000bc0:	0020      	movs	r0, r4
 8000bc2:	f000 f9db 	bl	8000f7c <_sbrk_r>
 8000bc6:	3001      	adds	r0, #1
 8000bc8:	d101      	bne.n	8000bce <sbrk_aligned+0x3a>
 8000bca:	2501      	movs	r5, #1
 8000bcc:	426d      	negs	r5, r5
 8000bce:	0028      	movs	r0, r5
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	200001c4 	.word	0x200001c4

08000bd8 <_malloc_r>:
 8000bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bda:	2203      	movs	r2, #3
 8000bdc:	1ccb      	adds	r3, r1, #3
 8000bde:	4393      	bics	r3, r2
 8000be0:	3308      	adds	r3, #8
 8000be2:	0006      	movs	r6, r0
 8000be4:	001f      	movs	r7, r3
 8000be6:	2b0c      	cmp	r3, #12
 8000be8:	d238      	bcs.n	8000c5c <_malloc_r+0x84>
 8000bea:	270c      	movs	r7, #12
 8000bec:	42b9      	cmp	r1, r7
 8000bee:	d837      	bhi.n	8000c60 <_malloc_r+0x88>
 8000bf0:	0030      	movs	r0, r6
 8000bf2:	f000 f873 	bl	8000cdc <__malloc_lock>
 8000bf6:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <_malloc_r+0x100>)
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d133      	bne.n	8000c6a <_malloc_r+0x92>
 8000c02:	0039      	movs	r1, r7
 8000c04:	0030      	movs	r0, r6
 8000c06:	f7ff ffc5 	bl	8000b94 <sbrk_aligned>
 8000c0a:	0004      	movs	r4, r0
 8000c0c:	1c43      	adds	r3, r0, #1
 8000c0e:	d15e      	bne.n	8000cce <_malloc_r+0xf6>
 8000c10:	9b00      	ldr	r3, [sp, #0]
 8000c12:	681c      	ldr	r4, [r3, #0]
 8000c14:	0025      	movs	r5, r4
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d14e      	bne.n	8000cb8 <_malloc_r+0xe0>
 8000c1a:	2c00      	cmp	r4, #0
 8000c1c:	d051      	beq.n	8000cc2 <_malloc_r+0xea>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	0029      	movs	r1, r5
 8000c22:	18e3      	adds	r3, r4, r3
 8000c24:	0030      	movs	r0, r6
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	f000 f9a8 	bl	8000f7c <_sbrk_r>
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	d147      	bne.n	8000cc2 <_malloc_r+0xea>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	0030      	movs	r0, r6
 8000c36:	1aff      	subs	r7, r7, r3
 8000c38:	0039      	movs	r1, r7
 8000c3a:	f7ff ffab 	bl	8000b94 <sbrk_aligned>
 8000c3e:	3001      	adds	r0, #1
 8000c40:	d03f      	beq.n	8000cc2 <_malloc_r+0xea>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	19db      	adds	r3, r3, r7
 8000c46:	6023      	str	r3, [r4, #0]
 8000c48:	9b00      	ldr	r3, [sp, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d040      	beq.n	8000cd2 <_malloc_r+0xfa>
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	42a2      	cmp	r2, r4
 8000c54:	d133      	bne.n	8000cbe <_malloc_r+0xe6>
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	e014      	b.n	8000c86 <_malloc_r+0xae>
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	dac5      	bge.n	8000bec <_malloc_r+0x14>
 8000c60:	230c      	movs	r3, #12
 8000c62:	2500      	movs	r5, #0
 8000c64:	6033      	str	r3, [r6, #0]
 8000c66:	0028      	movs	r0, r5
 8000c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000c6a:	6821      	ldr	r1, [r4, #0]
 8000c6c:	1bc9      	subs	r1, r1, r7
 8000c6e:	d420      	bmi.n	8000cb2 <_malloc_r+0xda>
 8000c70:	290b      	cmp	r1, #11
 8000c72:	d918      	bls.n	8000ca6 <_malloc_r+0xce>
 8000c74:	19e2      	adds	r2, r4, r7
 8000c76:	6027      	str	r7, [r4, #0]
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	d112      	bne.n	8000ca2 <_malloc_r+0xca>
 8000c7c:	9b00      	ldr	r3, [sp, #0]
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	6011      	str	r1, [r2, #0]
 8000c84:	6053      	str	r3, [r2, #4]
 8000c86:	0030      	movs	r0, r6
 8000c88:	0025      	movs	r5, r4
 8000c8a:	f000 f82f 	bl	8000cec <__malloc_unlock>
 8000c8e:	2207      	movs	r2, #7
 8000c90:	350b      	adds	r5, #11
 8000c92:	1d23      	adds	r3, r4, #4
 8000c94:	4395      	bics	r5, r2
 8000c96:	1aea      	subs	r2, r5, r3
 8000c98:	429d      	cmp	r5, r3
 8000c9a:	d0e4      	beq.n	8000c66 <_malloc_r+0x8e>
 8000c9c:	1b5b      	subs	r3, r3, r5
 8000c9e:	50a3      	str	r3, [r4, r2]
 8000ca0:	e7e1      	b.n	8000c66 <_malloc_r+0x8e>
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	e7ec      	b.n	8000c80 <_malloc_r+0xa8>
 8000ca6:	6862      	ldr	r2, [r4, #4]
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	d1d5      	bne.n	8000c58 <_malloc_r+0x80>
 8000cac:	9b00      	ldr	r3, [sp, #0]
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e7e9      	b.n	8000c86 <_malloc_r+0xae>
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	6864      	ldr	r4, [r4, #4]
 8000cb6:	e7a2      	b.n	8000bfe <_malloc_r+0x26>
 8000cb8:	002c      	movs	r4, r5
 8000cba:	686d      	ldr	r5, [r5, #4]
 8000cbc:	e7ab      	b.n	8000c16 <_malloc_r+0x3e>
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	e7c4      	b.n	8000c4c <_malloc_r+0x74>
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	0030      	movs	r0, r6
 8000cc6:	6033      	str	r3, [r6, #0]
 8000cc8:	f000 f810 	bl	8000cec <__malloc_unlock>
 8000ccc:	e7cb      	b.n	8000c66 <_malloc_r+0x8e>
 8000cce:	6027      	str	r7, [r4, #0]
 8000cd0:	e7d9      	b.n	8000c86 <_malloc_r+0xae>
 8000cd2:	605b      	str	r3, [r3, #4]
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	200001c0 	.word	0x200001c0

08000cdc <__malloc_lock>:
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <__malloc_lock+0xc>)
 8000ce0:	f7ff ff0b 	bl	8000afa <__retarget_lock_acquire_recursive>
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	200001bc 	.word	0x200001bc

08000cec <__malloc_unlock>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <__malloc_unlock+0xc>)
 8000cf0:	f7ff ff04 	bl	8000afc <__retarget_lock_release_recursive>
 8000cf4:	bd10      	pop	{r4, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200001bc 	.word	0x200001bc

08000cfc <__sflush_r>:
 8000cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cfe:	898b      	ldrh	r3, [r1, #12]
 8000d00:	0005      	movs	r5, r0
 8000d02:	000c      	movs	r4, r1
 8000d04:	071a      	lsls	r2, r3, #28
 8000d06:	d45c      	bmi.n	8000dc2 <__sflush_r+0xc6>
 8000d08:	684a      	ldr	r2, [r1, #4]
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	dc04      	bgt.n	8000d18 <__sflush_r+0x1c>
 8000d0e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	dc01      	bgt.n	8000d18 <__sflush_r+0x1c>
 8000d14:	2000      	movs	r0, #0
 8000d16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000d18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d0fa      	beq.n	8000d14 <__sflush_r+0x18>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2080      	movs	r0, #128	; 0x80
 8000d22:	682e      	ldr	r6, [r5, #0]
 8000d24:	602a      	str	r2, [r5, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	0140      	lsls	r0, r0, #5
 8000d2a:	6a21      	ldr	r1, [r4, #32]
 8000d2c:	4002      	ands	r2, r0
 8000d2e:	4203      	tst	r3, r0
 8000d30:	d034      	beq.n	8000d9c <__sflush_r+0xa0>
 8000d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d34:	89a3      	ldrh	r3, [r4, #12]
 8000d36:	075b      	lsls	r3, r3, #29
 8000d38:	d506      	bpl.n	8000d48 <__sflush_r+0x4c>
 8000d3a:	6863      	ldr	r3, [r4, #4]
 8000d3c:	1ac0      	subs	r0, r0, r3
 8000d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <__sflush_r+0x4c>
 8000d44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d46:	1ac0      	subs	r0, r0, r3
 8000d48:	0002      	movs	r2, r0
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	0028      	movs	r0, r5
 8000d4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000d50:	6a21      	ldr	r1, [r4, #32]
 8000d52:	47b8      	blx	r7
 8000d54:	89a2      	ldrh	r2, [r4, #12]
 8000d56:	1c43      	adds	r3, r0, #1
 8000d58:	d106      	bne.n	8000d68 <__sflush_r+0x6c>
 8000d5a:	6829      	ldr	r1, [r5, #0]
 8000d5c:	291d      	cmp	r1, #29
 8000d5e:	d82c      	bhi.n	8000dba <__sflush_r+0xbe>
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <__sflush_r+0x110>)
 8000d62:	410b      	asrs	r3, r1
 8000d64:	07db      	lsls	r3, r3, #31
 8000d66:	d428      	bmi.n	8000dba <__sflush_r+0xbe>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	6063      	str	r3, [r4, #4]
 8000d6c:	6923      	ldr	r3, [r4, #16]
 8000d6e:	6023      	str	r3, [r4, #0]
 8000d70:	04d2      	lsls	r2, r2, #19
 8000d72:	d505      	bpl.n	8000d80 <__sflush_r+0x84>
 8000d74:	1c43      	adds	r3, r0, #1
 8000d76:	d102      	bne.n	8000d7e <__sflush_r+0x82>
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <__sflush_r+0x84>
 8000d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8000d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d82:	602e      	str	r6, [r5, #0]
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d0c5      	beq.n	8000d14 <__sflush_r+0x18>
 8000d88:	0023      	movs	r3, r4
 8000d8a:	3344      	adds	r3, #68	; 0x44
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d002      	beq.n	8000d96 <__sflush_r+0x9a>
 8000d90:	0028      	movs	r0, r5
 8000d92:	f7ff feb5 	bl	8000b00 <_free_r>
 8000d96:	2000      	movs	r0, #0
 8000d98:	6360      	str	r0, [r4, #52]	; 0x34
 8000d9a:	e7bc      	b.n	8000d16 <__sflush_r+0x1a>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	0028      	movs	r0, r5
 8000da0:	47b8      	blx	r7
 8000da2:	1c43      	adds	r3, r0, #1
 8000da4:	d1c6      	bne.n	8000d34 <__sflush_r+0x38>
 8000da6:	682b      	ldr	r3, [r5, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0c3      	beq.n	8000d34 <__sflush_r+0x38>
 8000dac:	2b1d      	cmp	r3, #29
 8000dae:	d001      	beq.n	8000db4 <__sflush_r+0xb8>
 8000db0:	2b16      	cmp	r3, #22
 8000db2:	d101      	bne.n	8000db8 <__sflush_r+0xbc>
 8000db4:	602e      	str	r6, [r5, #0]
 8000db6:	e7ad      	b.n	8000d14 <__sflush_r+0x18>
 8000db8:	89a2      	ldrh	r2, [r4, #12]
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	81a3      	strh	r3, [r4, #12]
 8000dc0:	e7a9      	b.n	8000d16 <__sflush_r+0x1a>
 8000dc2:	690e      	ldr	r6, [r1, #16]
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d0a5      	beq.n	8000d14 <__sflush_r+0x18>
 8000dc8:	680f      	ldr	r7, [r1, #0]
 8000dca:	600e      	str	r6, [r1, #0]
 8000dcc:	1bba      	subs	r2, r7, r6
 8000dce:	9201      	str	r2, [sp, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	079b      	lsls	r3, r3, #30
 8000dd4:	d100      	bne.n	8000dd8 <__sflush_r+0xdc>
 8000dd6:	694a      	ldr	r2, [r1, #20]
 8000dd8:	60a2      	str	r2, [r4, #8]
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd99      	ble.n	8000d14 <__sflush_r+0x18>
 8000de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000de2:	0032      	movs	r2, r6
 8000de4:	001f      	movs	r7, r3
 8000de6:	0028      	movs	r0, r5
 8000de8:	9b01      	ldr	r3, [sp, #4]
 8000dea:	6a21      	ldr	r1, [r4, #32]
 8000dec:	47b8      	blx	r7
 8000dee:	2800      	cmp	r0, #0
 8000df0:	dc06      	bgt.n	8000e00 <__sflush_r+0x104>
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	2001      	movs	r0, #1
 8000df6:	89a2      	ldrh	r2, [r4, #12]
 8000df8:	4240      	negs	r0, r0
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	81a3      	strh	r3, [r4, #12]
 8000dfe:	e78a      	b.n	8000d16 <__sflush_r+0x1a>
 8000e00:	9b01      	ldr	r3, [sp, #4]
 8000e02:	1836      	adds	r6, r6, r0
 8000e04:	1a1b      	subs	r3, r3, r0
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	e7e7      	b.n	8000dda <__sflush_r+0xde>
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	dfbffffe 	.word	0xdfbffffe

08000e10 <_fflush_r>:
 8000e10:	690b      	ldr	r3, [r1, #16]
 8000e12:	b570      	push	{r4, r5, r6, lr}
 8000e14:	0005      	movs	r5, r0
 8000e16:	000c      	movs	r4, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_fflush_r+0x12>
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	0028      	movs	r0, r5
 8000e20:	bd70      	pop	{r4, r5, r6, pc}
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d004      	beq.n	8000e30 <_fflush_r+0x20>
 8000e26:	6a03      	ldr	r3, [r0, #32]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <_fflush_r+0x20>
 8000e2c:	f7ff fc5e 	bl	80006ec <__sinit>
 8000e30:	220c      	movs	r2, #12
 8000e32:	5ea3      	ldrsh	r3, [r4, r2]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f1      	beq.n	8000e1c <_fflush_r+0xc>
 8000e38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e3a:	07d2      	lsls	r2, r2, #31
 8000e3c:	d404      	bmi.n	8000e48 <_fflush_r+0x38>
 8000e3e:	059b      	lsls	r3, r3, #22
 8000e40:	d402      	bmi.n	8000e48 <_fflush_r+0x38>
 8000e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e44:	f7ff fe59 	bl	8000afa <__retarget_lock_acquire_recursive>
 8000e48:	0028      	movs	r0, r5
 8000e4a:	0021      	movs	r1, r4
 8000e4c:	f7ff ff56 	bl	8000cfc <__sflush_r>
 8000e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e52:	0005      	movs	r5, r0
 8000e54:	07db      	lsls	r3, r3, #31
 8000e56:	d4e2      	bmi.n	8000e1e <_fflush_r+0xe>
 8000e58:	89a3      	ldrh	r3, [r4, #12]
 8000e5a:	059b      	lsls	r3, r3, #22
 8000e5c:	d4df      	bmi.n	8000e1e <_fflush_r+0xe>
 8000e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e60:	f7ff fe4c 	bl	8000afc <__retarget_lock_release_recursive>
 8000e64:	e7db      	b.n	8000e1e <_fflush_r+0xe>
	...

08000e68 <__swhatbuf_r>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	000e      	movs	r6, r1
 8000e6c:	001d      	movs	r5, r3
 8000e6e:	230e      	movs	r3, #14
 8000e70:	5ec9      	ldrsh	r1, [r1, r3]
 8000e72:	0014      	movs	r4, r2
 8000e74:	b096      	sub	sp, #88	; 0x58
 8000e76:	2900      	cmp	r1, #0
 8000e78:	da0c      	bge.n	8000e94 <__swhatbuf_r+0x2c>
 8000e7a:	89b2      	ldrh	r2, [r6, #12]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	0011      	movs	r1, r2
 8000e80:	4019      	ands	r1, r3
 8000e82:	421a      	tst	r2, r3
 8000e84:	d013      	beq.n	8000eae <__swhatbuf_r+0x46>
 8000e86:	2100      	movs	r1, #0
 8000e88:	3b40      	subs	r3, #64	; 0x40
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	6029      	str	r1, [r5, #0]
 8000e8e:	6023      	str	r3, [r4, #0]
 8000e90:	b016      	add	sp, #88	; 0x58
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	466a      	mov	r2, sp
 8000e96:	f000 f84d 	bl	8000f34 <_fstat_r>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	dbed      	blt.n	8000e7a <__swhatbuf_r+0x12>
 8000e9e:	23f0      	movs	r3, #240	; 0xf0
 8000ea0:	9901      	ldr	r1, [sp, #4]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	4019      	ands	r1, r3
 8000ea6:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <__swhatbuf_r+0x4c>)
 8000ea8:	18c9      	adds	r1, r1, r3
 8000eaa:	424b      	negs	r3, r1
 8000eac:	4159      	adcs	r1, r3
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	e7ea      	b.n	8000e8a <__swhatbuf_r+0x22>
 8000eb4:	ffffe000 	.word	0xffffe000

08000eb8 <__smakebuf_r>:
 8000eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000eba:	2602      	movs	r6, #2
 8000ebc:	898b      	ldrh	r3, [r1, #12]
 8000ebe:	0005      	movs	r5, r0
 8000ec0:	000c      	movs	r4, r1
 8000ec2:	4233      	tst	r3, r6
 8000ec4:	d006      	beq.n	8000ed4 <__smakebuf_r+0x1c>
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	3347      	adds	r3, #71	; 0x47
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	6123      	str	r3, [r4, #16]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	6163      	str	r3, [r4, #20]
 8000ed2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000ed4:	466a      	mov	r2, sp
 8000ed6:	ab01      	add	r3, sp, #4
 8000ed8:	f7ff ffc6 	bl	8000e68 <__swhatbuf_r>
 8000edc:	9900      	ldr	r1, [sp, #0]
 8000ede:	0007      	movs	r7, r0
 8000ee0:	0028      	movs	r0, r5
 8000ee2:	f7ff fe79 	bl	8000bd8 <_malloc_r>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d108      	bne.n	8000efc <__smakebuf_r+0x44>
 8000eea:	220c      	movs	r2, #12
 8000eec:	5ea3      	ldrsh	r3, [r4, r2]
 8000eee:	059a      	lsls	r2, r3, #22
 8000ef0:	d4ef      	bmi.n	8000ed2 <__smakebuf_r+0x1a>
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	4393      	bics	r3, r2
 8000ef6:	431e      	orrs	r6, r3
 8000ef8:	81a6      	strh	r6, [r4, #12]
 8000efa:	e7e4      	b.n	8000ec6 <__smakebuf_r+0xe>
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	89a2      	ldrh	r2, [r4, #12]
 8000f00:	6020      	str	r0, [r4, #0]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	81a3      	strh	r3, [r4, #12]
 8000f06:	9b00      	ldr	r3, [sp, #0]
 8000f08:	6120      	str	r0, [r4, #16]
 8000f0a:	6163      	str	r3, [r4, #20]
 8000f0c:	9b01      	ldr	r3, [sp, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <__smakebuf_r+0x74>
 8000f12:	0028      	movs	r0, r5
 8000f14:	230e      	movs	r3, #14
 8000f16:	5ee1      	ldrsh	r1, [r4, r3]
 8000f18:	f000 f81e 	bl	8000f58 <_isatty_r>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d005      	beq.n	8000f2c <__smakebuf_r+0x74>
 8000f20:	2303      	movs	r3, #3
 8000f22:	89a2      	ldrh	r2, [r4, #12]
 8000f24:	439a      	bics	r2, r3
 8000f26:	3b02      	subs	r3, #2
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	81a3      	strh	r3, [r4, #12]
 8000f2c:	89a3      	ldrh	r3, [r4, #12]
 8000f2e:	433b      	orrs	r3, r7
 8000f30:	81a3      	strh	r3, [r4, #12]
 8000f32:	e7ce      	b.n	8000ed2 <__smakebuf_r+0x1a>

08000f34 <_fstat_r>:
 8000f34:	2300      	movs	r3, #0
 8000f36:	b570      	push	{r4, r5, r6, lr}
 8000f38:	4d06      	ldr	r5, [pc, #24]	; (8000f54 <_fstat_r+0x20>)
 8000f3a:	0004      	movs	r4, r0
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	0011      	movs	r1, r2
 8000f40:	602b      	str	r3, [r5, #0]
 8000f42:	f7ff fa9e 	bl	8000482 <_fstat>
 8000f46:	1c43      	adds	r3, r0, #1
 8000f48:	d103      	bne.n	8000f52 <_fstat_r+0x1e>
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d000      	beq.n	8000f52 <_fstat_r+0x1e>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	200001b8 	.word	0x200001b8

08000f58 <_isatty_r>:
 8000f58:	2300      	movs	r3, #0
 8000f5a:	b570      	push	{r4, r5, r6, lr}
 8000f5c:	4d06      	ldr	r5, [pc, #24]	; (8000f78 <_isatty_r+0x20>)
 8000f5e:	0004      	movs	r4, r0
 8000f60:	0008      	movs	r0, r1
 8000f62:	602b      	str	r3, [r5, #0]
 8000f64:	f7ff fa9b 	bl	800049e <_isatty>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d103      	bne.n	8000f74 <_isatty_r+0x1c>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d000      	beq.n	8000f74 <_isatty_r+0x1c>
 8000f72:	6023      	str	r3, [r4, #0]
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	200001b8 	.word	0x200001b8

08000f7c <_sbrk_r>:
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	b570      	push	{r4, r5, r6, lr}
 8000f80:	4d06      	ldr	r5, [pc, #24]	; (8000f9c <_sbrk_r+0x20>)
 8000f82:	0004      	movs	r4, r0
 8000f84:	0008      	movs	r0, r1
 8000f86:	602b      	str	r3, [r5, #0]
 8000f88:	f7ff fa9e 	bl	80004c8 <_sbrk>
 8000f8c:	1c43      	adds	r3, r0, #1
 8000f8e:	d103      	bne.n	8000f98 <_sbrk_r+0x1c>
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d000      	beq.n	8000f98 <_sbrk_r+0x1c>
 8000f96:	6023      	str	r3, [r4, #0]
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	200001b8 	.word	0x200001b8

08000fa0 <_init>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa6:	bc08      	pop	{r3}
 8000fa8:	469e      	mov	lr, r3
 8000faa:	4770      	bx	lr

08000fac <_fini>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb2:	bc08      	pop	{r3}
 8000fb4:	469e      	mov	lr, r3
 8000fb6:	4770      	bx	lr
